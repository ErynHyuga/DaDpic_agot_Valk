# Stripped down version of make_concubine_interaction for the AI
# Avoids redirection logic and recipient list building to improve performance
ai_make_concubine_interaction = {
	hidden = yes
	
	ai_targets = {
		ai_recipients = prisoners
	}
	ai_targets = {
		ai_recipients = courtiers
	}
	ai_target_quick_trigger = {
		adult = yes
		owner_attracted = yes # Not optimal, but saves a lot of performance
	}
	ai_frequency = 12

	ai_potential = {
		is_landed = yes
		is_adult = yes
		fertility > 0
		allowed_more_concubines = yes
		NOR = {
			has_trait = chaste
			has_trait = celibate
			has_sexuality = asexual
		}
		trigger_if = {
			limit = {
				culture = { has_cultural_tradition = tradition_monogamous } #mz_tag
			}
			allowed_to_marry_same_sex_trigger = yes # Only allow concubines to be selected for monogamous-culture characters if same-sex marriage allowed.
		}
	}

	is_shown = {
		make_concubine_is_shown_trigger = yes
	}

	is_valid_showing_failures_only = {
		make_concubine_is_valid_trigger = yes
		trigger_if = { # mz_tag
			limit = {
				scope:actor = { mz_has_monogamy_trigger = yes }
			}
			scope:recipient = { sex_opposite_of = scope:actor }
		}
	}

	auto_accept = yes

	ai_will_do = {
		base = 0
		
		modifier = { # Basic Filtering
			add = 100
			scope:actor = {
				number_of_concubines < number_of_desired_concubines
			}
			scope:recipient = {
				can_have_children_with = { CHARACTER = scope:actor } # Only if you can have kids since this is about fertility and genetic traits
				fertility > 0.2
				age < 36
			}
		}
		
		modifier = {
			add = 100
			scope:recipient = {
				is_imprisoned_by = scope:actor
				can_have_children_with = { CHARACTER = scope:actor } # Only if you can have kids since this is about fertility and genetic traits
				OR = {
					is_lowborn = no
					num_of_good_genetic_traits > 0
				}
				fertility > 0.1
				trigger_if = {
					limit = {
						is_female = yes
					}
					age < define:NChildbirth|MAX_FEMALE_REPRODUCTION_AGE
				}
			}
		}

		modifier = {
			add = 100
			scope:actor = {
				allowed_to_marry_same_sex_trigger = yes
				sex_same_as = scope:recipient
				is_attracted_to_gender_of = scope:recipient
				OR = { #If they're not in need of kids, or someone who they can have kids with
					any_child = {
						count >= 2
					}
					any_consort = {
						can_have_children_with = { CHARACTER = scope:actor }
						fertility > 0.1
					}
				}
			}
		}

		modifier = { #Even if you're allowed to take same-sex concubines we don't want the AI to do so without a good reason if they're not attracted to the person
			add = -200
			scope:actor = {
				allowed_to_marry_same_sex_trigger = yes
				sex_same_as = scope:recipient
				NOT = { is_attracted_to_gender_of = scope:recipient }
			}
		}

		modifier = { # If they don't have a batch of kids and opposite sex consorts to handle that situation
			add = -200
			scope:actor = {
				allowed_to_marry_same_sex_trigger = yes
				sex_same_as = scope:recipient
				NOT = {
					any_child = {
						count >= 2
					}
				}
				NOT = {
					any_consort = {
						can_have_children_with = { CHARACTER = scope:actor }
						fertility > 0.1
					}
				}
			}
		}

		# Unity modifiers
		evaluate_action_increasing_house_unity = {
			VALUE = 100
		}

		modifier = { # Incest Filtering: Hard NO!
			factor = 0
			scope:actor = {
				relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:recipient }
				NOR = {
					accepts_incest_with_trigger = { CHARACTER = scope:recipient }
					sexually_liberal_trigger = yes
					AND = {
						AND = {
							exists = primary_heir
							primary_heir = { NOT = { dynasty = root.dynasty }	}
						}
						NOT = {
							primary_title = {
								any_title_heir = {	dynasty = root.dynasty 	}
							}
						}
					}
				}
			}
		}

		modifier = { # Incest Filtering: Not likely, but keep the door open...
			factor = 0.2 
			scope:actor = {
				relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:recipient }
				OR = {
					accepts_incest_with_trigger = { CHARACTER = scope:recipient }
					sexually_liberal_trigger = yes
					AND = {
						exists = primary_heir
						primary_heir = { NOT = { dynasty = root.dynasty }	}
						NOT = {
							primary_title = {
								any_title_heir = {	dynasty = root.dynasty 	}
							}
						}
					}
				}
			}
		}

		modifier = { # Less likely if married to a player and the target is the player heir 
			factor = 0.4
			scope:actor = {
				any_spouse = {
					is_ai = no
					scope:recipient = {	
						OR = {
							is_primary_heir_of = prev 
							is_heir_of = prev
						}
					}
				}
			}
		}
	}

	on_accept = {
		scope:actor = {
			save_scope_as = secondary_actor
		}
		scope:recipient = {
			save_scope_as = secondary_recipient
		}
		concubine_on_accept_effect = yes

		# If we're a clan this interaction affects unity
		add_clan_unity_interaction_effect = {
			CHARACTER = scope:actor
			TARGET = scope:recipient
			VALUE = minor_unity_gain
			DESC = clan_unity_concubinage.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}
}

offer_concubine = {
	category = interaction_category_diplomacy
	icon = concubine_icon

	desc = offer_concubine_desc

	ai_targets = {
		ai_recipients = neighboring_rulers
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 144

	greeting = positive
	notification_text = OFFER_CONCUBINE_NOTIFICATION

	#interface = concubine_list

	needs_recipient_to_open = yes

	populate_actor_list = {
		scope:actor = {
			every_courtier = {
				limit = {
					can_be_offered_as_concubine_to_character_trigger = {
						GIVER = scope:actor
						CHARACTER = scope:recipient
					}
				}
				add_to_list = characters
			}
			every_prisoner = {
				limit = {
					NOT = { is_in_list = characters }
					can_be_offered_as_concubine_to_character_trigger = {
						GIVER = scope:actor
						CHARACTER = scope:recipient
					}
				}
				add_to_list = characters
			}
		}
	}

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = {
			faith = { has_doctrine = doctrine_concubines }
		}
		scope:recipient = {
			allowed_concubines = yes
			is_adult = yes
		}
		trigger_if = {
			limit = {
				scope:recipient.culture = { has_cultural_tradition = tradition_monogamous } #mz_tag
			}
			scope:recipient = { allowed_to_marry_same_sex_trigger = yes } # Only allow concubines to be selected for monogamous-culture characters if same-sex marriage allowed.
		}
	}

	is_valid_showing_failures_only = {
		custom_description = {
			text = take_concubine_available_character_opp
			object = scope:recipient
			scope:actor = {
				OR = {
					any_courtier = {
						can_be_offered_as_concubine_to_character_trigger = {
							GIVER = scope:actor
							CHARACTER = scope:recipient
						}
					}
					any_prisoner = {
						can_be_offered_as_concubine_to_character_trigger = {
							GIVER = scope:actor
							CHARACTER = scope:recipient
						}
					}
				}
			}
		}
		custom_description = {
			text = take_concubine_allowed_more
			object = scope:recipient
			scope:recipient = {
				allowed_more_concubines = yes
			}
		}
	}

	can_be_picked = {
		is_adult = yes
	}

	can_send = {
		custom_description = {
			text = character_unavailable_to_be_offered_as_concubine
			object = scope:secondary_actor
			scope:secondary_actor = {
				can_be_offered_as_concubine_to_character_trigger = {
					GIVER = scope:actor
					CHARACTER = scope:recipient
				}
			}
		}
	}

	auto_accept = no

	ai_accept = {
		base = 50
		
		modifier = {
			add = {
				value = 50
				multiply = scope:secondary_actor.num_of_good_genetic_traits
			}
			scope:secondary_actor = {
				sex_opposite_of = scope:recipient #mz_tag
				num_of_good_genetic_traits > 0
				trigger_if = {
					limit = {
						is_female = yes
					}
					age < define:NChildbirth|MAX_FEMALE_REPRODUCTION_AGE
				}
			}
			desc = AI_POSITIVE_TRAIT_REASON
		}

		modifier = {
			add = {
				value = 50
			}
			scope:secondary_actor = {
				is_lowborn = no
				trigger_if = {
					limit = {
						is_female = yes
					}
					age < define:NChildbirth|MAX_FEMALE_REPRODUCTION_AGE
				}
			}
			desc = AI_DYNASTY_PRESTIGE_REASON_NOBLE
		}

		modifier = {
			add = {
				value = -50
				multiply = scope:secondary_actor.num_of_bad_genetic_traits
			}
			scope:secondary_actor = {
				sex_opposite_of = scope:recipient #mz_tag
				OR = {
					num_of_bad_genetic_traits > 0
				}
				trigger_if = {
					limit = {
						is_female = yes
					}
					age < define:NChildbirth|MAX_FEMALE_REPRODUCTION_AGE
				}
			}
			desc = AI_NEGATIVE_TRAIT_REASON
		}

		modifier = {
			add = {
				value = -50
			}
			scope:secondary_actor = {
				sex_opposite_of = scope:recipient #mz_tag
				is_lowborn = yes
				num_of_good_genetic_traits = 0
				trigger_if = {
					limit = {
						is_female = yes
					}
					age < define:NChildbirth|MAX_FEMALE_REPRODUCTION_AGE
				}
			}
			desc = AI_DYNASTY_PRESTIGE_REASON_LOWBORN_NO_POSITIVE_TRAIT
		}

		opinion_modifier = { # Opinion of you
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1.0
			desc = AI_OPINION_REASON
		}

		opinion_modifier = { # Opinion of concubine
			who = scope:recipient
			opinion_target = scope:secondary_actor
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}

		compare_modifier = { # Recipient is reluctant to marry old women (procreation is a key factor)
			trigger = {
				OR = { #mz_tag
					scope:recipient = { is_female = no }
					AND = {
						scope:recipient = { is_female = yes }
						scope:recipient = { age < 50 } # old women are more likely to accept other old women as consorts, if other factors don't intervene
					}
				}
				scope:secondary_actor = {
					age > 29
					is_female = yes
				}
			}
			target = scope:secondary_actor
			value = age
			multiplier = -5.0
			step = 1
			offset = -29
			desc = MARRY_AGE
		}

		modifier = { # A Recipient is unwilling to take a same-sex concubine if their faith doesn't support it
			add = -1000
			
			scope:recipient = {
				allowed_to_marry_same_sex_trigger = no
				sex_same_as = scope:secondary_actor
			}
			desc = SAME_SEX_MARRIAGE_FAITH_REASON_RECIPIENT
		}

		modifier = { # Unwilling if they don't have a batch of kids and opposite sex consorts to handle that situation
			add = -200
			scope:recipient = {
				allowed_to_marry_same_sex_trigger = yes
				sex_same_as = scope:secondary_actor
				trigger_if = {
					limit = {
						NOT = {
							any_consort = {
								can_have_children_with = { CHARACTER = scope:recipient }
								fertility > 0.1
							}
						}
					}
					any_child = {
						is_player_heir_of_trigger = { CHARACTER = root }
					}
				}
				trigger_else = {
					always = no
				}
			}
			desc = AI_NO_FERTILITY_REASON
		}

		modifier = {
			add = 50
			scope:recipient = {
				is_attracted_to_gender_of = scope:secondary_actor
			}
			desc = AI_ATTRACTION_REASON
		}

		modifier = { # A Recipient is more likely to agree if you're their liege
			add = 40
			
			scope:recipient = {
				target_is_liege_or_above = scope:actor
			}
			desc = LIEGE_REASON
		}

		#More/Less likely based on difference in rank between actor and recipient
		modifier = {
			add = 20
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 1
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = 30
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 2
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = 40
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 3
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = 50
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 4
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = 60
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 5
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -20
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -1
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -30
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -2
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -40
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -3
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -50
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -4
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -60
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -5
				}
			}
			desc = AI_RANK_DIFF
		}
		
		modifier = {
			add = intimidated_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = {
			add = -250
			scope:secondary_actor = {
				has_std_trigger = yes
			}
			desc = AI_STD_REASON
		}
		modifier = {
			add = -250
			scope:secondary_actor = {
				has_epidemic_disease_trigger = yes
			}
			desc = AI_CONTAGIOUS_REASON
		}
		modifier = {
			add = -5000
			scope:secondary_actor = {
				fertility <= 0
			}
			desc = AI_FERTILITY_REASON
		}
		modifier = {
			add = -5000
			scope:recipient = {
				mz_has_monogamy_trigger = yes #mz_tag
			}
			scope:secondary_actor = {
				sex_same_as = scope:recipient
			}
			desc = AI_FERTILITY_REASON
		}
		modifier = {
			scope:hook = yes
			add = 500
			scope:actor = { NOT = { has_strong_hook = scope:recipient } }
			desc = SCHEME_WEAK_HOOK_USED
		}
		modifier = {
			scope:hook = yes
			add = 1000
			scope:actor = { has_strong_hook = scope:recipient }
			desc = SCHEME_STRONG_HOOK_USED
		}

		# Unity modifiers
		evaluate_action_increasing_house_unity = {
			VALUE = 100
		}
	}

	ai_potential = {
		is_adult = yes
		NOT = { has_trait = incapable }
		is_at_war = no
		NOR = {
			has_trait = greedy
			ai_greed > very_high_positive_ai_value
		}
		faith = { has_doctrine = doctrine_concubines }
	}

	ai_will_do = {
		base = 0
		
		modifier = { # Basic Filtering
			add = 100
			scope:recipient = {
				number_of_concubines < number_of_desired_concubines
			}
			scope:secondary_actor = {
				trigger_if = {
					limit = {
						allowed_to_marry_same_sex_trigger = no
					}
					sex_opposite_of = scope:recipient
				}
				fertility > 0.2
				age < 36
				NOR = {
					is_councillor_of = scope:actor
					is_of_major_interest_trigger = {
						CHARACTER = scope:actor
					}
					is_concubine_of = scope:actor
				}
			}
		}

		modifier = { # If secondary_actor is close to actor, a good character, or if actor should take them as concubine
			add = -100
			scope:secondary_actor = {
				is_of_minor_interest_trigger = {
					CHARACTER = scope:actor
				}
				AND = {
					can_become_concubine_of_character_trigger = { CHARACTER = scope:actor }
					scope:actor = { number_of_concubines < number_of_desired_concubines }
				}
			}
		}

		modifier = { # If secondary_actor could be an agent...
			add = 25
			any_scheme = {
				scheme_target = scope:recipient
				save_temporary_scope_as = scheme_check
			}
			scope:secondary_actor = {
				is_valid_as_agent_in_scheme = scope:scheme_check
			}
		}
		
		modifier = { # More likely if it's a neighboring ruler that you want to like you
			add = 50
			scope:recipient = {
				any_neighboring_top_liege_realm_owner = { this = scope:actor }
				max_military_strength > scope:actor.max_military_strength
			}
		}
		
		modifier = { # More likely if its your friend and it's a nice concubine
			add = 50
			scope:recipient = {
				OR = {
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
				}
			}
			scope:secondary_actor = {
				sex_opposite_of = scope:recipient #mz_tag
				fertility > 0.2
				age < 36
				OR = {
					has_trait = lustful
					num_of_good_genetic_traits > 0
				}
			}
		}

		modifier = { #Even if they're allowed to take same-sex concubines we don't want the AI to suggest it without a good reason if they're not attracted to the person
			add = -200
			scope:recipient = {
				allowed_to_marry_same_sex_trigger = yes
				sex_same_as = scope:secondary_actor
				NOT = { is_attracted_to_gender_of = scope:secondary_actor }
			}
		}

		# Unity modifiers
		evaluate_action_increasing_house_unity = {
			VALUE = 100
		}

		modifier = { # No if it's a same-sex concubinage and actor isn't accepting of it
			factor = 0
			scope:actor = {
				allowed_to_marry_same_sex_trigger = no
				scope:recipient = { sex_same_as = scope:secondary_actor }
			}
		}

		modifier = { # No if it's a same-sex concubinage and recipient isn't accepting of it
			factor = 0
			scope:recipient = {
				allowed_to_marry_same_sex_trigger = no
				sex_same_as = scope:secondary_actor
			}
		}

		modifier = { # Incest Filtering: Hard NO!
			factor = 0
			scope:recipient = {
				relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:secondary_actor }
				NOR = {
					accepts_incest_with_trigger = { CHARACTER = scope:secondary_actor }
					sexually_liberal_trigger = yes
				}
			}
		}

		modifier = { # Incest Filtering: Not likely, but keep the door open...
			factor = 0.2 
			scope:recipient = {
				relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:secondary_actor }
				OR = {
					accepts_incest_with_trigger = { CHARACTER = scope:secondary_actor }
					sexually_liberal_trigger = yes
				}
			}
		}

		modifier = { # Faith considerations
			factor = 0
			scope:recipient = {
				faith = {
					faith_hostility_level = {
						target = scope:actor.faith
						value >= faith_hostile_level
					}
				}
				NOR = {
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
				}
			}
		}

		modifier = { # Monogamy only wants opposite-sex concubines #mz_tag
			factor = 0
			scope:recipient = {
				mz_has_monogamy_trigger = yes
				sex_same_as = scope:secondary_actor
			}
		}		
	}

	on_send = {
		scope:secondary_actor = { # to block the same character from being offered twice
			add_character_flag = {
				flag = has_been_offered_as_concubine
				days = 5
			}
		}
	}
	
	on_accept = {
		concubine_offer_on_accept_effect = yes

		# If we're a clan this interaction affects unity
		add_clan_unity_interaction_effect = {
			CHARACTER = scope:actor
			TARGET = scope:recipient
			VALUE = minor_unity_gain
			DESC = clan_unity_concubinage_offer.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}

	on_decline = {
		scope:actor = {
			send_interface_toast = {
				type = event_generic_neutral
				title = msg_concubine_offer_rejected_title
				right_icon = scope:recipient
				left_icon = scope:secondary_actor
				custom_tooltip = msg_concubine_offer_rejected
			}
		}

		# If we're a clan this interaction affects unity
		add_clan_unity_interaction_effect = {
			CHARACTER = scope:actor
			TARGET = scope:recipient
			VALUE = medium_unity_loss
			DESC = clan_unity_concubinage_offer_decline.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}

	send_options_exclusive = no
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
}

# For some reason this interaction doesn't seem to trigger on_divorce ... so I must overwrite it.
divorce_character_dynast_request_interaction = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no
	icon = icon_dynasty

	desc = divorce_character_dynast_request_interaction_desc

	cost = {
		piety = divorce_cost
		renown = minor_dynasty_prestige_value
	}

	redirect = {
		scope:recipient = {
			save_scope_as = secondary_actor
		}

		if = {
			limit = {
				exists = scope:recipient.primary_spouse
			}
			scope:recipient.primary_spouse = {
				save_scope_as = recipient
			}
		}
	}

	is_shown = {
		NOT = { scope:secondary_actor = scope:actor }
		scope:secondary_actor.dynasty.dynast = scope:actor

		scope:actor.faith = {
			# We are not required to seek approval of a spiritual HoF
			NAND = {
				has_doctrine = doctrine_divorce_approval
				has_doctrine = doctrine_spiritual_head
				exists = religious_head
			}
		}
		OR = {
			AND = {
				NOT = { scope:actor.faith = scope:secondary_actor.faith }
				# They are not required to seek approval of a spiritual HoF of the Dynasty Member
				scope:secondary_actor.faith = {
					NOT = {
						has_doctrine = doctrine_divorce_approval
					}
				}
			}
			scope:actor.faith = scope:secondary_actor.faith
		}
		
		scope:recipient = {
			is_spouse_of = scope:secondary_actor
			is_concubine = no # Can set aside Concubines at any time
		}
	}

	is_valid_showing_failures_only = {
		custom_tooltip = {
			NOT = {
				scope:actor.culture = {
					has_cultural_parameter = cannot_divorce
				}
			}
			text = CULTURE_FORBIDS_DIVORCE
		}
		NOT = {
			scope:actor.faith = {
				has_doctrine = doctrine_divorce_disallowed
			}
		}
		scope:actor.dynasty = {
			dynasty_prestige >= minor_dynasty_prestige_value
		}

		NOT = {
			scope:secondary_actor.faith = {
				has_doctrine = doctrine_divorce_disallowed
			}
		}
		scope:secondary_actor = { is_busy_in_events_localised = yes }
		scope:secondary_actor = { NOT = { has_strong_hook = scope:actor } }
		trigger_if = {
			limit = {
				scope:secondary_actor = {
					NOR = {
						is_child_of = scope:actor
						is_grandchild_of = scope:actor
						is_great_grandchild_of = scope:actor
					}
				}
			}
			custom_description = {
				scope:secondary_actor.top_liege = scope:actor.top_liege
				text = "same_realm_as"
			}
		}
	}

	auto_accept = yes

	on_accept = {
		scope:actor = {
			send_interface_toast = {
				title = divorce_character_dynast_request_interaction_title
				custom_tooltip = divorce_character_dynast_request_interaction_desc

				left_icon = scope:secondary_actor
				right_icon = scope:recipient
			}
		}


		scope:secondary_actor = { #mz_tag
			divorce_effect = {
				DIVORCER = scope:secondary_actor
				DIVORCEE = scope:recipient
			}
			trigger_event = {
				days = 1
				on_action = mz_homosexual_spouses_update
			}
			add_opinion = {
				modifier = forced_divorce_opinion
				target = scope:actor
			}
		}
		if = {
			limit = {
				NOT = { scope:recipient = scope:actor }
			}
			scope:recipient = {
				trigger_event = marriage_interaction.0030
				trigger_event = {
					days = 1
					on_action = mz_homosexual_spouses_update
				}
				add_opinion = {
					modifier = forced_divorce_opinion
					target = scope:actor
				}
			}
		}
	}
	
	# AI
	ai_targets = {
		ai_recipients = dynasty
		max = 10
	}
	ai_frequency = 72
	
	ai_potential = {
		is_ruler = yes
	}

	ai_will_do = {
		base = 0

		modifier = { # The AI wants to force a divorce if their heir is not from their dynasty and current marriage within the dynasty are not promising
			add = 100
			scope:secondary_actor = {
				fertility > 0.1
			}
			scope:recipient = {
				is_ai = yes
				fertility < 0.1
			}
			exists = scope:actor.primary_heir
			exists = scope:actor.primary_heir.dynasty
			NOT = { scope:actor.primary_heir.dynasty = this.dynasty }
		}

		#Players should not be targeted 
		modifier = {
			add = -1000
			OR = {
				scope:secondary_actor = { is_ai = no }
				scope:recipient = { is_ai = no }
			}
		}
	}
}

divorce_character_dynast_request_rel_head_interaction = {
	category = interaction_category_diplomacy
	use_diplomatic_range = no
	icon = icon_dynasty

	cost = {
		piety = divorce_cost
		renown = minor_dynasty_prestige_value
	}

	redirect = {
		scope:recipient = {
			save_scope_as = secondary_actor
		}

		if = {
			limit = {
				exists = scope:recipient.primary_spouse
			}
			scope:recipient.primary_spouse = {
				save_scope_as = secondary_recipient
			}
		}
		
		if = {
			limit = {
				exists = scope:actor.faith.religious_head
			}
			scope:actor.faith.religious_head = {
				save_scope_as = recipient
			}
		}
	}

	greeting = positive
	notification_text = ASK_FOR_DIVORCE_NOTIFICATION

	is_shown = {
		NOT = { scope:secondary_actor = scope:actor }
		scope:secondary_actor.dynasty.dynast = scope:actor
		NOT = {
			scope:secondary_actor = { is_spouse_of = scope:actor }
		}

		exists = scope:secondary_recipient

		scope:actor.faith = scope:secondary_actor.faith
		exists = scope:actor.faith.religious_head
		scope:actor.faith = {
			has_doctrine = doctrine_spiritual_head
			has_doctrine = doctrine_divorce_approval
		}
	}

	is_valid_showing_failures_only = {
		custom_tooltip = {
			NOT = {
				scope:actor.culture = {
					has_cultural_parameter = cannot_divorce
				}
			}
			text = CULTURE_FORBIDS_DIVORCE
		}
		scope:actor.dynasty = {
			dynasty_prestige >= minor_dynasty_prestige_value
		}

		scope:secondary_actor = { is_busy_in_events_localised = yes }
		scope:secondary_actor = { NOT = { has_strong_hook = scope:actor } }
		trigger_if = {
			limit = {
				scope:secondary_actor = {
					NOR = {
						is_child_of = scope:actor
						is_grandchild_of = scope:actor
						is_great_grandchild_of = scope:actor
					}
				}
			}
			custom_description = {
				scope:secondary_actor.top_liege = scope:actor.top_liege
				text = "same_realm_as"
			}
		}
	}

	ai_accept = {
		base = 0 # Should be 0 for all interactions
		
		divorce_character_ai_accept_modifier = yes

		modifier = { # Divine Family is part of the faith
			add = -100
			desc = DIVORCE_INCESTUOUS

			scope:secondary_actor = { 
				is_close_or_extended_family_of = scope:secondary_recipient
				faith = { has_doctrine = tenet_divine_marriage }
			}
		}
		
		modifier = { # More likely if the marriage is incestuous, unless Divine Family is part of the faith
			add = 100
			desc = DIVORCE_INCESTUOUS

			scope:secondary_actor = {
				relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = scope:secondary_recipient	}
			}
		}		
		
		modifier = { # You are of the same dynasty as the Head of Faith
			add = 5
			desc = YOU_ARE_MY_DYNASTY_MEMBER
			scope:recipient = {
				is_lowborn = no
				dynasty = scope:actor.dynasty
				NOR = {
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
					is_child_of = scope:actor
					scope:recipient.dynasty = scope:secondary_recipient.dynasty
				}
			}
		}
		
		
		modifier = { # You are of the same house as the Head of Faith
			add = 10
			desc = YOU_ARE_MY_HOUSE_MEMBER
			scope:recipient = {
				is_lowborn = no
				house = scope:actor.house
				NOR = {
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
					is_child_of = scope:actor
					scope:recipient.house = scope:secondary_recipient.house
				}
			}
		}
		
		modifier = { # Related to the Head of Faith
			add = 25
			desc = YOU_ARE_MY_RELATIVE
			scope:recipient = {
				OR = {
					is_close_or_extended_family_of = scope:actor
					is_cousin_of = scope:actor
				}
				NOT = { is_child_of = scope:actor }
			}
		}
		
		modifier = { # Parent of the Head of Faith
			add = 50
			desc = PARENTS #YOU_ARE_MY_PARENT
			scope:recipient = {
				is_child_of = scope:actor
			}
		}
		
		modifier = {
			add = {
				add = 10
				multiply = scope:actor.num_virtuous_traits
			}
			scope:actor.num_virtuous_traits > 0
			desc = I_AM_VIRTUOUS
		}
		
		modifier = {
			add = {
				add = -10
				multiply = scope:secondary_recipient.num_virtuous_traits
			}
			scope:secondary_recipient.num_virtuous_traits > 0
			desc = THEY_ARE_VIRTUOUS
		}
		
		modifier = {
			add = {
				add = -10
				multiply = scope:actor.num_sinful_traits
			}
			scope:actor.num_sinful_traits > 0
			desc = I_AM_SINFUL
		}
		
		modifier = {
			add = {
				add = 10
				multiply = scope:secondary_recipient.num_sinful_traits
			}
			scope:secondary_recipient.num_sinful_traits > 0
			desc = THEY_ARE_SINFUL
		}
	}
	
	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:divorce_hook = yes
		}
	}
	
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = divorce_hook
		localization = GENERIC_SPEND_A_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	
	send_options_exclusive = no
	
	ai_min_reply_days = 1
	ai_max_reply_days = 5

	on_accept = { #mz_tag
		if = {
			limit = { always = scope:divorce_hook }
			scope:actor = {
				if = {
					limit = {
						has_usable_hook = scope:recipient
					}
					use_hook = scope:recipient
				}
			}
		}
		scope:actor = {
			trigger_event = religious_interaction.6
		}

		scope:secondary_actor = {
			divorce_effect = {
				DIVORCER = scope:secondary_actor
				DIVORCEE = scope:secondary_recipient
			}
			add_opinion = {
				modifier = forced_divorce_opinion
				target = scope:actor
			}
			trigger_event = {
				days = 1
				on_action = mz_homosexual_spouses_update
			}
		}

		scope:secondary_recipient = {
			add_opinion = {
				modifier = forced_divorce_opinion
				target = scope:actor
			}
			trigger_event = {
				days = 1
				on_action = mz_homosexual_spouses_update
			}
		}
	}

	on_decline = {
		send_interface_toast = {
			title = divorce_character_dynast_request_rel_head_interaction_decline_notification

			right_icon = scope:actor.faith.religious_head
		}
	}
	
	# AI
	ai_targets = {
		ai_recipients = dynasty
		max = 10
	}
	ai_frequency = 72
	
	ai_potential = {
		is_ruler = yes
	}

	ai_will_do = {
		base = 0

		modifier = { # The AI wants to force a divorce if their heir is not from their dynasty and current marriage within the dynasty are not promising
			add = 100
			scope:secondary_actor = {
				fertility > 0.1
			}
			scope:secondary_recipient = {
				is_ai = yes
				fertility < 0.1
			}
			exists = scope:actor.primary_heir
			exists = scope:actor.primary_heir.dynasty
			NOT = { scope:actor.primary_heir.dynasty = this.dynasty }
		}
		
		modifier = { # The AI will only use a Hook if they couldn't otherwise do this
			scope:divorce_hook = yes
			add = -1
		}

		#Players should not be targeted 
		modifier = {
			add = -1000
			OR = {
				scope:secondary_actor = { is_ai = no }
				scope:secondary_recipient = { is_ai = no }
			}
		}
	}	
}