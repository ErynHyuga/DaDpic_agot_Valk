# Characters getting married
# root = Major partner of the marriage
# scope:spouse = Minor partner of the marriage
on_marriage = {
	on_actions = {
		mz_homosexual_spouses_update
		mz_ai_recruit_court_consort
		mz_lesbian_exchange_male_for_female_spouse
	}
}

# Characters get divorced in any way
# root = character initiating the divorce
# scope:spouse = the divorced spouse
# scope:reason = flag:script or flag:faith
on_divorce = {
	on_actions = { 
		delay = { days = 1 } # Delay is necessary for this to work correctly. Why? loldunno
		mz_homosexual_spouses_update
		mz_break_eternal_devotion_action
		mz_remove_banned_from_bed_spouse
	}
} # I am not sure why, but this doesn't seem to be firing via "enforced divorce."

# Character ceases to be another's concubine - update sacred concubines modifier
# root = the concubinist
# scope:concubine = the concubine
# scope:reason = flag:death, flag:faith, or flag:script
on_concubinage_end = {
	on_actions = { 
		mz_sacred_concubines_delayed_update
		mz_remove_banned_from_bed_concubine
	}
}

on_concubinage = {
	on_actions = {
		mz_sacred_concubines_update
		mz_replace_monogamy_concubine
	}
}

# Remove banned from bed if it doesn't auto-remove for some reason
mz_remove_banned_from_bed_concubine = {
	trigger = {
		scope:concubine ?= { is_alive = yes }
		scope:concubine ?= { has_character_modifier = rejected_from_marriage_bed_modifier }
	}
	effect = {
		scope:concubine = {
			remove_character_modifier = rejected_from_marriage_bed_modifier
		}
	}
}

mz_remove_banned_from_bed_spouse = {
	trigger = {
		OR = {
			has_character_modifier = rejected_from_marriage_bed_modifier
			scope:spouse = { has_character_modifier = rejected_from_marriage_bed_modifier }
		}
	}
	effect = {
		if = {
			limit = {
				has_character_modifier = rejected_from_marriage_bed_modifier
				is_married = no
			}
			remove_character_modifier = rejected_from_marriage_bed_modifier
		}
		if = {
			limit = {
				scope:spouse = { has_character_modifier = rejected_from_marriage_bed_modifier }
				scope:spouse = { is_married = no }
			}
			scope:spouse = { remove_character_modifier = rejected_from_marriage_bed_modifier }
		}
	}
}

# Removing Eternal Devotion
mz_break_eternal_devotion_action = {
	trigger = {
		faith = { has_doctrine_parameter = mz_lesbian_devotion_parameter } # Has Lesbian Divinity
		OR = {
			has_trait = mz_lesbian_divinity_trait # The trait will initiate this check
			scope:spouse = { has_trait = mz_lesbian_divinity_trait }
		}
	}
	effect = {
		if = { # If root initiates the divorce, remove all bonuses and give a negative modifier
			limit = { var:mz_eternal_devotion = scope:spouse }
			scope:spouse = { save_scope_as = mz_dumper }
			trigger_event = mz_lover.0100 # Done via a letter event
		}
		else_if = { # If the divorce is not initiated by root, then we just remove the bonuses but don't give the negative modifier
			limit = {
				scope:spouse = { has_variable = mz_eternal_devotion }
			}
			scope:spouse.var:mz_eternal_devotion = {
				mz_remove_all_lesdivinity_bonuses_effect = yes
				if = {
					limit = { var:mz_eternal_devotion ?= scope:spouse }
					remove_variable = mz_eternal_devotion
				}				
			}
			scope:spouse = { 
				mz_remove_all_lesdivinity_bonuses_effect = yes
				remove_variable = mz_eternal_devotion
			}
		}
	}
}

# Make sure AI concubines of monogamous individuals are opposite-sex, I can't seem to weigh this heavily enough for it to happen on its own
mz_replace_monogamy_concubine = {
	trigger = {
		is_landed = yes
		allowed_to_marry_same_sex_trigger = yes
		mz_has_monogamy_trigger = yes
		scope:concubine = { sex_same_as = root }
	}
	effect = {
		remove_concubine = scope:concubine
		trigger_event = { id = mz_court_consort.1100 }
	}
}

# Update sacred concubines modifier
mz_sacred_concubines_update = {
	trigger = {
		mz_sacred_same_sex_marriage = yes
		mz_has_concubines_trigger = yes
	}
	effect = {
		mz_update_sacred_concubines_effect = yes
	}
}

mz_sacred_concubines_delayed_update = {
	trigger = {
		mz_sacred_same_sex_marriage = yes
		mz_has_concubines_trigger = yes
	}
	effect = {
		trigger_event = {
			delayed = yes
			on_action = mz_sacred_concubines_update
		}
	}
}

# Update homosexual spouses modifier
mz_homosexual_spouses_update = {
	trigger = {
		OR = {
			mz_sacred_same_sex_marriage = yes
			has_character_modifier = mz_lesbian_union_concubines
			has_character_modifier = mz_lesbian_union_polygamy
			has_character_modifier = mz_lesbian_union_monogamy
			has_character_modifier = mz_homosexual_union_concubines
			has_character_modifier = mz_homosexual_union_polygamy
			has_character_modifier = mz_homosexual_union_monogamy
		}
	}
	effect = { 
		if = { # Because the related on_actions make a distinction between an initiator/primary and secondary, 
			limit = { is_female = yes } # This should not cause an infinite loop or excess triggers
			mz_update_lesbian_marriage_effect = yes
			scope:spouse ?= { mz_update_lesbian_marriage_effect = yes }
			every_spouse = { mz_update_lesbian_marriage_effect = yes }
		}
		else = {
			mz_update_homosexual_marriage_effect = yes
			scope:spouse ?= { mz_update_homosexual_marriage_effect = yes }
			every_spouse = { mz_update_homosexual_marriage_effect = yes }
		}
	}
}

mz_homosexual_spouses_delayed_update = {
	trigger = { # Only worry about this if they have the modifier or a relevant faith
		any_spouse = {
			OR = {
				mz_sacred_same_sex_marriage = yes
				has_character_modifier = mz_lesbian_union_concubines
				has_character_modifier = mz_lesbian_union_polygamy
				has_character_modifier = mz_lesbian_union_monogamy
				has_character_modifier = mz_homosexual_union_concubines
				has_character_modifier = mz_homosexual_union_polygamy
				has_character_modifier = mz_homosexual_union_monogamy
			}
		}
	}
	effect = {
		every_spouse = {
			trigger_event = {
				days = 1
				on_action = mz_homosexual_spouses_update
			}	
		}
	}
}

## New On_action for AI lesbian marriage. We're going to skim this down for now.
mz_lesbian_marriage_pulse = {
	trigger = {
		is_ai = yes
		is_landed = yes
		is_female = yes
		is_adult = yes
		is_imprisoned = no
		can_marry_common_trigger = yes # This trigger ignores current marriage/concubine status.
		is_betrothed = no
		OR = {
			is_married = no
			mz_has_expected_num_wives_trigger = no # Do we have the right number of wives? Slightly different check for polygamy.
		}
		faith = { has_doctrine_parameter = mz_lesbian_marriage_parameter }
		NOR = { # If we were married at a grand wedding, let's not cancel it right away
			has_character_modifier = gwedding_grand_wedding_modifier
			has_character_modifier = gwedding_grandiose_wedding_modifier
			has_character_modifier = gwedding_magnificent_wedding_modifier
		}		
	}
	effect = {
		if = { # Check if character is married to family of top_liege. For now we're only checking top_liege to keep things simple.
			limit = {
				is_independent_ruler = no
				exists = top_liege
			}
			top_liege = { save_temporary_scope_as = mz_liege }
			if = {
				limit = { 
					allowed_more_spouses = no # If we are allowed to take another spouse then let's ignore this check.
					any_spouse = {
						is_female = no
						mz_is_close_family_relation_of_trigger = { CHARACTER = scope:mz_liege }
					}					
				}
				random = {
					chance = 50
					opinion_modifier = {
						who = root
						opinion_target = scope:mz_liege
						multiplier = -1
						min = -50
						max = 50
					}
					ai_value_modifier = {
						ai_zeal = 0.25
						min = 0
					}
					mz_lesbian_marriage_pulse_monthly_effect = yes # Chance to not fire effect if we're married to a male close relation of top_liege.
				}
			}
			else = { mz_lesbian_marriage_pulse_monthly_effect = yes } # If we're not married to any relation of top_liege just fire the effect.
		}
		else = { mz_lesbian_marriage_pulse_monthly_effect = yes } # Ditto if we don't have a top_liege.
	}
}

## This is used to make the AI replace their husbands when following lesbian marriage faiths
mz_lesbian_exchange_male_for_female_spouse = { 
	trigger = { 
		is_landed = yes
		is_female = yes
		scope:spouse = { is_female = no }
		faith = { has_doctrine_parameter = mz_lesbian_marriage_parameter }
		OR = {
			has_sexuality = homosexual
			has_sexuality = bisexual
			ai_zeal >= low_negative_ai_value
		}
		NOT = {
			any_liege_or_above = {
				scope:spouse = { 
					mz_is_close_family_relation_of_trigger = { CHARACTER = prev }
				}
			}
		}
		NOT = { has_character_flag = mz_lesbian_exchange_male_for_female_spouse_delay_flag }
		NOR = { # If we were married at a grand wedding, let's not cancel it right away
			has_character_modifier = gwedding_grand_wedding_modifier
			has_character_modifier = gwedding_grandiose_wedding_modifier
			has_character_modifier = gwedding_magnificent_wedding_modifier
		}
	}
	effect = {
		add_character_flag = {
			flag = mz_lesbian_exchange_male_for_female_spouse_delay_flag
			years = 3
		}
		trigger_event = {
			delayed = yes
			days = 1
			on_action = mz_lesbian_marriage_pulse
		}
	}
}

# This pulse reminds the AI to recruit a court consort if they have a same-sex spouse and no consort.
mz_ai_recruit_court_consort = {
	effect = {
		if = {
			limit = {
				is_ai = yes
				is_landed = yes
				sex_same_as = scope:spouse
				NOR = { 
					employs_court_position = mz_court_consort_court_position
					any_court_position_holder = { type = mz_court_consort_court_position }
				}
			}
			trigger_event = mz_court_consort.1100
		}
		if = {
			limit = {
				scope:spouse = {
					is_ai = yes
					is_landed = yes
					sex_same_as = prev
					NOR = { 
						employs_court_position = mz_court_consort_court_position
						any_court_position_holder = { type = mz_court_consort_court_position }
					}					
				}
			}
			scope:spouse = { trigger_event = mz_court_consort.1100 }
		}
	}
}