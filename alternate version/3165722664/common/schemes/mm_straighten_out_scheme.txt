mz_straighten_out = {
	
	skill = diplomacy
	desc = mz_straighten_out_desc_general
	# cooldown = { months = 2 }
	uses_agents = no
	power_per_skill_point = 8
	spymaster_power_per_skill_point = 0	
	resistance_per_skill_point = 0
	spymaster_resistance_per_skill_point = 0
	uses_resistance = no
	minimum_progress_chance = 10
	maximum_progress_chance = 90
	minimum_success = 5
	maximum_success = 95
	icon = mz_straighten_out_scheme
	
	allow = {
		is_adult = yes
		scope:target = {
			age >= 10
			is_imprisoned = no
			mz_has_valid_negative_trait_trigger = { OWNER = scope:owner }
		}
		is_imprisoned = no
		is_travelling = no 
		scope:target = {
			is_adult = yes
			is_travelling = no 
		}
		
		#Have I been blocked from targeting this character?
		custom_description = {
			text = mz_straighten_out_blocked
			object = scope:target
			NOT = {
				scope:target = {
					has_opinion_modifier = {
						modifier = mz_scheme_straighten_out_blocker_opinion
						target = scope:owner
					}
				}
			}
		}

		#AI blockers
		trigger_if = {
			limit = { is_ai = yes }
			opinion = {
				target = scope:target
				value > 0
			}
			scope:target = {
				trigger_if = { #So players don't get spammed by AI sway
					limit = {
						is_ai = no
					}
					NOT = {
						any_targeting_scheme = {
							scheme_type = mz_straighten_out
						}
					}
				}
			}
		}
	}
	
	valid = {
		NOT = { is_at_war_with = scope:target }
		scope:target = {
			is_ai = yes
			OR = {
				is_child_of = scope:owner
				is_grandchild_of = scope:owner
				is_great_grandchild_of = scope:owner
			}
			OR = {
				exists = location
				in_diplomatic_range = scope:owner
			}
		}
		trigger_if = { # Invalidate scheme for AI is their stress is too high
			limit = { 
				scope:owner = { is_ai = yes }
			}
			stress < 75
		}
	}

	base_success_chance = {
		base = 20
		#SCHEME OWNER#
		#Language
		modifier = {
			add = 5
			desc = YOU_SPEAK_THE_LANGUAGE
			scope:owner = { knows_language_of_culture = scope:target.culture }
		}
		modifier = {
			add = 8
			scope:owner = { 
				has_focus = diplomacy_family_focus
				NOT = { has_trait = family_first } # Family Focus gets a decent boost
			}
			desc = MZ_SCHEME_FAMILY_FOCUS
		}
		modifier = {
			add = 20
			scope:owner = { has_trait = family_first } # Family Matriarch should have a very large boost
			desc = MZ_SCHEME_FAMILY_FIRST
		}
		modifier = {
			add = 15
			scope:target = { is_adult = no }
			desc = MZ_THEY_ARE_A_CHILD
		}
		modifier = {
			add = -15
			scope:target = { 
				OR = {
					has_trait = arrogant
					has_trait = stubborn
					has_trait = callous
				}
			}
			desc = MZ_PERSONALITY_FACTOR
		}
		modifier = {
			add = -10
			desc = mz_previous_straighten_out
			scope:target = {
				has_opinion_modifier = {
					target = scope:owner
					modifier = mz_scheme_straighten_out_opinion
					value <= -25
				}
				has_opinion_modifier = {
					target = scope:owner
					modifier = mz_scheme_straighten_out_opinion
					value > -40
				}
			}
		}
		modifier = {
			add = -20
			desc = mz_previous_straighten_out
			scope:target = {
				has_opinion_modifier = {
					target = scope:owner
					modifier = mz_scheme_straighten_out_opinion
					value <= -40
				}
				has_opinion_modifier = {
					target = scope:owner
					modifier = mz_scheme_straighten_out_opinion
					value > -55
				}
			}
		}
		modifier = {
			add = -30
			desc = mz_previous_straighten_out
			scope:target = {
				has_opinion_modifier = {
					target = scope:owner
					modifier = mz_scheme_straighten_out_opinion
					value <= -55
				}
				has_opinion_modifier = {
					target = scope:owner
					modifier = mz_scheme_straighten_out_opinion
					value > -70
				}
			}
		}
		modifier = {
			add = -40
			desc = mz_previous_straighten_out
			scope:target = {
				has_opinion_modifier = {
					target = scope:owner
					modifier = mz_scheme_straighten_out_opinion
					value <= -70
				}
				has_opinion_modifier = {
					target = scope:owner
					modifier = mz_scheme_straighten_out_opinion
					value > -85
				}
			}
		}
		modifier = {
			add = -50
			desc = mz_previous_straighten_out
			scope:target = {
				has_opinion_modifier = {
					target = scope:owner
					modifier = mz_scheme_straighten_out_opinion
					value <= -85
				}
			}
		}
		compare_modifier = {
			desc = sway_my_diplomacy
			target = scope:owner
			value = diplomacy
			multiplier = 2
		}
		#Reduction of power against foreign rulers
		modifier = {
			desc = mz_foreign_ruler
			add = -20
			scope:target = { is_ruler = yes }
			NOT = { scope:target.top_liege = scope:owner.top_liege }
		}

		# Dynasty Kin Personal Scheme Success Chance on Dynasty Perk
		modifier = {
			add = kin_legacy_4_success_chance
			desc = KIN_LEGACY_DESC
			exists = scope:owner.dynasty
			scope:owner.dynasty = { has_dynasty_perk = kin_legacy_4 }
			scope:target.dynasty = scope:owner.dynasty
		}

		# House Personal Scheme Success Chance on Cultural Parameter
		modifier = {
			add = cultural_house_personal_scheme_success_chance
			desc = KIN_PARAMETER_DESC
			exists = scope:owner.house
			exists = scope:target.house
			scope:owner.culture = { has_cultural_parameter = cultural_house_personal_scheme_success_chance }
			scope:target.house = scope:owner.house
		}

		#Rival penalty
		modifier = {
			add = -30
			desc = sway_my_rival
			scope:owner = { has_relation_rival = scope:target }
		}

		#Friend bonus
		modifier = {
			add = 10
			scope:owner = { has_relation_friend = scope:target }
			NOT = { 
				scope:owner = { has_relation_best_friend = scope:target } 
			}
			desc = mz_scheme_so_my_friend
		}

		#Best Friend Bonus
		modifier = {
			add = 15
			scope:owner = { has_relation_best_friend = scope:target } 
			desc = mz_scheme_so_my_best_friend
		}

		#Rank tier difference (landed target/target whose liege doesn't care)
		modifier = { #3 or more higher rank
			add = 50
			desc = "HIGHER_RANK_THAN_SCHEME_TARGET"
			scope:target = {
				personal_scheme_success_compare_target_liege_tier_trigger = no
				NOT = {
					is_theocratic_lessee = yes
				}
			}
			scope:owner = {
				tier_difference = {
					target = scope:target
					value >= 3
				}
			}
		}
		modifier = { #2 higher rank
			add = 25
			desc = "HIGHER_RANK_THAN_SCHEME_TARGET"
			scope:target = {
				personal_scheme_success_compare_target_liege_tier_trigger = no
				NOT = {
					is_theocratic_lessee = yes
				}
			}
			scope:owner = {
				tier_difference = {
					target = scope:target
					value = 2
				}
			}
		}
		modifier = { #1 higher rank
			add = 10
			desc = "HIGHER_RANK_THAN_SCHEME_TARGET"
			scope:target = {
				personal_scheme_success_compare_target_liege_tier_trigger = no
				NOT = {
					is_theocratic_lessee = yes
				}
			}
			scope:owner = {
				tier_difference = {
					target = scope:target
					value = 1
				}
			}
		}
		modifier = { #1 lower rank
			add = -10
			desc = "LOWER_RANK_THAN_SCHEME_TARGET"
			scope:target = {
				personal_scheme_success_compare_target_liege_tier_trigger = no
			}
			scope:owner = {
				tier_difference = {
					target = scope:target
					value = -1
				}
			}
		}
		modifier = { #2 lower rank
			add = -25
			desc = "LOWER_RANK_THAN_SCHEME_TARGET"
			scope:target = {
				personal_scheme_success_compare_target_liege_tier_trigger = no
			}
			scope:owner = {
				tier_difference = {
					target = scope:target
					value = -2
				}
			}
		}
		modifier = { #3 or less lower rank
			add = -50
			desc = "LOWER_RANK_THAN_SCHEME_TARGET"
			scope:target = {
				personal_scheme_success_compare_target_liege_tier_trigger = no
			}
			scope:owner = {
				tier_difference = {
					target = scope:target
					value <= -3
				}
			}
		}
		#Rank tier difference (unlanded character)
		modifier = { #3 or more higher rank
			add = 15
			desc = "HIGHER_RANK_THAN_SCHEME_TARGET_LIEGE"
			scope:target = {
				personal_scheme_success_compare_target_liege_tier_trigger = yes
				NOT = {
					is_theocratic_lessee = yes
				}
			}
			scope:owner = {
				tier_difference = {
					target = scope:target.liege
					value >= 3
				}
			}
		}
		modifier = { #2 higher rank
			add = 10
			desc = "HIGHER_RANK_THAN_SCHEME_TARGET_LIEGE"
			scope:target = {
				personal_scheme_success_compare_target_liege_tier_trigger = yes
				NOT = {
					is_theocratic_lessee = yes
				}
			}
			scope:owner = {
				tier_difference = {
					target = scope:target.liege
					value = 2
				}
			}
		}
		modifier = { #1 higher rank
			add = 5
			desc = "HIGHER_RANK_THAN_SCHEME_TARGET_LIEGE"
			scope:target = {
				personal_scheme_success_compare_target_liege_tier_trigger = yes
				NOT = {
					is_theocratic_lessee = yes
				}
			}
			scope:owner = {
				tier_difference = {
					target = scope:target.liege
					value = 1
				}
			}
		}
		modifier = { #1 lower rank
			add = -5
			desc = "LOWER_RANK_THAN_SCHEME_TARGET_LIEGE"
			scope:target = {
				personal_scheme_success_compare_target_liege_tier_trigger = yes
			}
			scope:owner = {
				tier_difference = {
					target = scope:target.liege
					value = -1
				}
			}
		}
		modifier = { #2 lower rank
			add = -10
			desc = "LOWER_RANK_THAN_SCHEME_TARGET_LIEGE"
			scope:target = {
				personal_scheme_success_compare_target_liege_tier_trigger = yes
			}
			scope:owner = {
				tier_difference = {
					target = scope:target.liege
					value = -2
				}
			}
		}
		modifier = { #3 or less lower rank
			add = -15
			desc = "LOWER_RANK_THAN_SCHEME_TARGET_LIEGE"
			scope:target = {
				personal_scheme_success_compare_target_liege_tier_trigger = yes
			}
			scope:owner = {
				tier_difference = {
					target = scope:target.liege
					value <= -3
				}
			}
		}
		modifier = { # Some characters care about piety level
			add = {
				add = 5
				multiply = scope:owner.piety_level
			}
			desc = "I_AM_PIOUS"
			scope:owner.piety_level > 1
			scope:target = {
				OR = {
					is_clergy = yes
					has_trait = zealous
				}
			}
		}
		modifier = { # Some characters care about piety level
			add = -50
			desc = "I_AM_PIOUS"
			scope:owner.piety_level < 0
			scope:target = {
				OR = {
					is_clergy = yes
					has_trait = zealous
				}
			}
		}

		# Thicker Than Water Perk
		modifier = {
			add = thicker_than_water_bonus
			desc = BEFRIEND_THICKER_THAN_WATER_PERK_DESC
			scope:owner = {
				has_perk = thicker_than_water_perk
			}
			scope:target = {
				is_close_or_extended_family_of = scope:owner
			}
		}

		# Pedagogy Perk
		modifier = {
			add = 10
			desc = mz_scheme_so_pedagogy
			scope:owner = {
				has_perk = pedagogy_perk
			}
			scope:target = {
				is_close_or_extended_family_of = scope:owner
			}
		}
	}

	on_start = { # No ongoing events for the first ~3 months
		save_scope_as = scheme
		scope:scheme = {
			set_variable = {
				name = mz_scheme_so_ongoing_event
				value = yes
				days = 180
			}			
		}
	}

	on_ready = {
		save_scope_as = scheme
		random = {
			chance = scope:scheme.scheme_success_chance

			save_scope_value_as = {
				name = scheme_successful
				value = yes
			}
		}
		scope:owner = {
			if = {
				limit = {
					exists = scope:scheme_successful
				}
				if = {
					limit = { 
						scope:target = {
							NOT = {
								mz_has_valid_negative_trait_trigger = { OWNER = scope:owner }
							}
						}
					}
					scope:scheme = { end_scheme = yes }
				}
				else = { trigger_event = mz_scheme_so_outcome.1001 }
			}
			else = {
				if = {
					limit = { 
						scope:target = {
							NOT = {
								mz_has_valid_negative_trait_trigger = { OWNER = scope:owner }
							}
						}
					}
					scope:scheme = { end_scheme = yes }
				}
				else = { trigger_event = mz_scheme_so_outcome.1002 }
			}
		}
	}

	on_invalidated = {
		scheme_target = {
			save_scope_as = target
		}
		scheme_owner = {
			save_scope_as = owner
		}
		if = {
			limit = {
				scope:target = { is_alive = no }
			}
			scope:owner = {
				send_interface_toast = {
					title = mz_scheme_so_invalidated_title
					custom_description_no_bullet = { text = mz_scheme_so_invalidated_dead }
					left_icon = scope:target
				}
			}
		}
		else_if = {	
			limit = {
				scope:owner = {
					is_at_war_with = scope:target
				}
			}
			scope:owner = {
				send_interface_toast = {
					title = mz_scheme_so_invalidated_title
					custom_description_no_bullet = { text = mz_scheme_so_invalidated_war }
					left_icon = scope:target
				}
			}
		}
		else_if = {
			limit = {
				scope:target = { 
					NOT = { in_diplomatic_range = scope:owner } 
				}
			}
			scope:owner = {
				send_interface_toast = {
					title = mz_scheme_so_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						object = scope:target
						text = scheme_target_not_in_diplomatic_range
					}
				}
			}
		}
		else = { # Fallback
			scope:owner = {
				send_interface_toast = {
					title = mz_scheme_so_invalidated_title
					left_icon = scope:target
				}
			}			
		}
	}

	on_monthly = {
		save_scope_as = scheme
		scheme_target = { save_scope_as = target }
		scheme_owner = {
			save_scope_as = owner
			if = {
				limit = { 
					scope:target = {
						NOT = {
							mz_has_valid_negative_trait_trigger = { OWNER = scope:owner }
						}
					}
				}
				scope:scheme = { end_scheme = yes }
			}
			else = { 
				trigger_event = { on_action = mz_scheme_so_ongoing }
			}
		}
	}
	success_desc = "MZ_STRIAGHTEN_OUT_SUCCESS_DESC"
	#This proved too disruptive, this scheme can take a long time.
	#freeze_scheme_when_traveling = yes
	#freeze_scheme_when_traveling_target = yes
}
