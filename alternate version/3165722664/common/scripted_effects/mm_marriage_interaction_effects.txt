## Effect used to marry AI off randomly.
mz_lesbian_marriage_pulse_effect = {
	$CHARACTER$ = { save_scope_as = mz_spouse }
	# scope:mz_root is the initiator, will be a landed ruler seeking a wife
	# scope:mz_spouse is the target we want to marry

	# If we need to remove a male spouse to free up room for a female spouse, do so. Try to keep the male spouse as a concubine if possible
	if = {
		limit = { 
			is_married = yes
			any_spouse = { is_female = no }
			allowed_more_spouses = no
		}
		random_spouse = {
			limit = { is_female = no }
			save_temporary_scope_as = mz_divorcee
			divorce_effect = {
				DIVORCER = scope:mz_root
				DIVORCEE = scope:mz_divorcee
			}
			if = {
				limit = { 
					scope:mz_divorcee = { 
						is_imprisoned = no
						fertility >= 0.2
						is_courtier_of = scope:mz_root
						NOT = {
							any_heir_title = {} # Not heir to anything
						}
					}
					scope:mz_root = { allowed_more_concubines = yes }
				}
				scope:mz_root = { 
					make_concubine = scope:mz_divorcee
					if = {
						limit = {
							NOT = { employs_court_position = mz_court_consort_court_position }
							can_appoint_char_to_court_position = {
								CHAR = scope:mz_divorcee
								COURT_POS = mz_court_consort_court_position
							}
						}
						appoint_court_position = {
							recipient = scope:mz_divorcee
							court_position = mz_court_consort_court_position
						}
					}
				}
			}
		}
	}
	# The actor is the person initiating the pulse.
	save_scope_as = actor
	# This only pulses for landed rulers. Landed rulers are seeking out their own marriage. So actor and secondary actor are the same person.
	save_scope_as = secondary_actor
	# The target is the secondary recipient.
	scope:mz_spouse = { save_scope_as = secondary_recipient }
	# Now, let's figure out who has authority to say whether or not they get married.
	if = {
		limit = {
			scope:mz_spouse = { is_ruler = yes } # If they are a ruler, they make their own decisions.
		}
		scope:mz_spouse = { save_scope_as = recipient }
	}
	else_if = {
		limit = {
			scope:mz_spouse = { is_courtier = yes } # If they are a courtier, their liege is the recipient.
			exists = scope:mz_spouse.liege
		}
		scope:mz_spouse.liege = { save_scope_as = recipient }	
	}
	else = { 
		scope:mz_spouse = { save_scope_as = recipient } # If niether of the above are true, they again make their own decision.
	}
	# Now that the proper scopes are set, let's try and marry them.
	random_list = {
		0 = {
			min = 0
			max = 2000
			mz_lesbian_marriage_pulse_accept_modifier = yes
			mz_lesbian_marriage_accepted_effect = yes
		}
		0 = {
			min = 0
			max = 2000
			modifier = {
				add = 200 # We're going to devalue this if you're married to close family of your liege or top_liege
				is_independent_ruler = no # This also makes sure that top_liege is not own self
				OR = {
					AND = {
						exists = liege
						scope:mz_spouse = { 
							mz_is_close_family_relation_of_trigger = { CHARACTER = scope:mz_root.liege }
						}
					}
					AND = {
						exists = top_liege
						scope:mz_spouse = { 
							mz_is_close_family_relation_of_trigger = { CHARACTER = scope:mz_root.top_liege }
						}
					}
				}
			}			
		}
	}
}

mz_lesbian_marriage_accepted_effect = {
	if = { # Removes concubinage
		limit = { 
			scope:mz_spouse = { is_concubine = yes }
		}
		scope:mz_spouse = {
			random_consort = {
				limit = { 
					any_concubine = { this = scope:mz_spouse }
				}
				remove_concubine = scope:mz_spouse
			}
		}
	}
	if = { # Break marriages to men
		limit = { 
			scope:mz_spouse = { 
				is_married = yes 
				any_spouse = { is_female = no }
				allowed_more_spouses = no
			}
		}
		scope:mz_spouse = {
			if = {
				limit = { is_landed = no }
				every_spouse = {
					limit = { is_female = no }
					save_temporary_scope_as = mz_divorcee
					divorce_effect = {
						DIVORCER = scope:mz_spouse
						DIVORCEE = scope:mz_divorcee
					}
				}
			}
			else = {
				random_spouse = {
					limit = { is_female = no }
					save_temporary_scope_as = mz_divorcee
					divorce_effect = {
						DIVORCER = scope:mz_spouse
						DIVORCEE = scope:mz_divorcee
					}
					if = {
						limit = { 
							scope:mz_divorcee = { 
								is_imprisoned = no
								fertility >= 20 
								is_ruler = no 
								NOT = { any_heir_title = {} }
							}
							scope:mz_spouse = { allowed_more_concubines = yes }
						}
						scope:mz_spouse = { 
							make_concubine = scope:mz_divorcee
							if = {
								limit = {
									NOT = { employs_court_position = mz_court_consort_court_position }
									can_appoint_char_to_court_position = {
										CHAR = scope:mz_divorcee
										COURT_POS = mz_court_consort_court_position
									}
								}
								appoint_court_position = {
									recipient = scope:mz_divorcee
									court_position = mz_court_consort_court_position
								}
							}
						}
					}
				}				
			}
			if = {
				limit = { 
					NOR = {
						scope:mz_spouse.faith = { has_doctrine_parameter = mz_lesbian_marriage_parameter }
						scope:mz_spouse.faith = { has_doctrine = doctrine_divorce_allowed }
					}
				}
				add_prestige_level = -1
				add_piety_level = -1
			}
		}
	}
	if = { # Checks if normal or grand wedding. Grand Weddings are fairly rare, mostly for king-tier rulers.
		limit = {
			NOT = { this = scope:mz_spouse } 
			can_marry_character_trigger = { CHARACTER = scope:mz_spouse }
		}
		mz_lesbian_marriage_marry_effect = yes
	}
}

mz_create_lesbian_grand_wedding_betrothal = { # We need to create a new effect here because the default does NOT create a matrilineal betrothal.
	$SPOUSE_1$ = {
		create_betrothal_matrilineal = $SPOUSE_2$
	}
	debug_log = "mz_mz_create_lesbian_grand_wedding_betrothal Lesbian Grand Marriage betrothal triggered"
	debug_log_scopes = yes
	debug_log_date = yes
	set_grand_wedding_betrothal_variables = {
		SPOUSE_1 = $SPOUSE_1$
		SPOUSE_2 = $SPOUSE_2$
		HOST = $HOST$
		PROMISEE = $PROMISEE$
	}	
}

mz_lesbian_marriage_marry_effect = { # Marry mz_spouse and set new primary female spouse (used for AI to ensure women in lesbian marriage set a woman as their primary)
	if = {
		limit = { # Includes DLC checks
			NOT = { scope:mz_spouse = root }
			mz_desires_grand_wedding = yes 
		} 
		random_list = {
			30 = {
				ai_value_modifier = {
					ai_boldness = 0.5
				}
				ai_value_modifier = {
					ai_sociability = 0.5
				}
				modifier = { # Grand Wedding should be pretty rare for duke-tier rulers
					highest_held_title_tier < tier_kingdom
					add = -20
				}
				modifier = {
					short_term_gold < mz_wedding_cost_plus_value
					add = -20
				}				
				if = {
					limit = { 
						NOT = { scope:recipient = root }
					}
					mz_create_lesbian_grand_wedding_betrothal = {
						SPOUSE_1 = root
						SPOUSE_2 = scope:mz_spouse
						HOST = root
						PROMISEE = scope:recipient
					}
				}
				else = {
					mz_create_lesbian_grand_wedding_betrothal = {
						SPOUSE_1 = root
						SPOUSE_2 = scope:mz_spouse
						HOST = root
						PROMISEE = scope:mz_spouse
					}
				}
			}
			70 = {
				modifier = {
					has_trait = arrogant
					add = -30
				}
				modifier = {
					OR = {
						culture = { has_cultural_pillar = ethos_courtly }
						AND = {
							is_independent_ruler = no
							has_vassal_stance = courtly
						}
					}
					add = -25
				}
				ai_value_modifier = {
					ai_greed = 0.5
					min = 0
				}
				min = 1 # Always save some chance
				marry = scope:mz_spouse
			}
		}
	}
	else = { marry = scope:mz_spouse }
	if = { 
		limit = { mz_has_polygamy_trigger = yes }
		if = {
			limit = { 
				primary_spouse = { is_female = no }
				scope:mz_spouse = { is_landed = no }
			}
			set_primary_spouse = scope:mz_spouse
		}
		else_if = {
			limit = { 
				primary_spouse = { is_female = no }
				any_spouse = {
					is_female = yes
					is_landed = no
				}
			}
			random_spouse = {
				limit = {
					is_female = yes
					is_landed = no
				}
				scope:mz_root = { set_primary_spouse = prev }
			}
		}
		else_if = {
			limit = { 
				primary_spouse = { is_female = no }
				any_spouse = { is_female = yes }
			}
			random_spouse = {
				limit = { is_female = yes }
				scope:mz_root = { set_primary_spouse = prev }
			}
		}			
	}
	if = { # If more than one male spouse, get rid of extras.
		limit = {
			any_spouse = {
				is_female = no
				count > 1
			}
		}
		every_spouse = {
			limit = {
				is_female = no
				NOR = {
					this = scope:mz_root.primary_spouse # If the primary spouse is still male somehow, don't get rid of them etiher.
					has_court_position = mz_court_consort_court_position # Don't get rid of your consort!
				}
			}
			save_temporary_scope_as = mz_divorcee
			divorce_effect = {
				DIVORCER = root
				DIVORCEE = scope:mz_divorcee
			}			
		}
	}
}

mz_lesbian_marriage_pulse_monthly_effect = {
	save_scope_as = mz_root
	every_relation = {
		type = soulmate
		limit = {
			mz_lesbian_marriage_pulse_trigger = yes
			NOT = { is_in_list = mz_potential_spouses }
		}
		add_to_temporary_list = mz_potential_spouses
	}
	every_relation = {
		type = lover
		limit = {
			mz_lesbian_marriage_pulse_trigger = yes
			NOT = { is_in_list = mz_potential_spouses }
		}
		add_to_temporary_list = mz_potential_spouses
	}
	every_relation = {
		type = friend
		limit = {
			mz_lesbian_marriage_pulse_trigger = yes
			NOT = { is_in_list = mz_potential_spouses }
		}
		add_to_temporary_list = mz_potential_spouses
	}
	every_courtier_or_guest = {
		limit = {
			mz_lesbian_marriage_pulse_trigger = yes
			NOT = { is_in_list = mz_potential_spouses }
		}
		add_to_temporary_list = mz_potential_spouses			
	}
	top_liege = {
		if = {
			limit = {
				mz_lesbian_marriage_pulse_trigger = yes
				NOT = { is_in_list = mz_potential_spouses }
			}
			add_to_temporary_list = mz_potential_spouses
		}
		random_courtier = {
			limit = {
				mz_lesbian_marriage_pulse_trigger = yes
				NOT = { is_in_list = mz_potential_spouses }
			}
			weight = {
				base = 1
				modifier = {
					add = { value = mz_lesbian_marriage_script_value }
				}	
			}
			add_to_temporary_list = mz_potential_spouses
		}
		every_vassal_or_below = {
			limit = {
				highest_held_title_tier >= tier_county
				mz_lesbian_marriage_pulse_trigger = yes
				NOT = { is_in_list = mz_potential_spouses }
			}
			add_to_temporary_list = mz_potential_spouses
			random_courtier = {
				limit = {
					mz_lesbian_marriage_pulse_trigger = yes
					NOT = { is_in_list = mz_potential_spouses }
				}
				weight = {
					base = 1
					modifier = {
						add = { value = mz_lesbian_marriage_script_value }
					}	
				}
				add_to_temporary_list = mz_potential_spouses
			}
		}
	}
	every_realm_province = {
		if = {
			limit = {
				save_temporary_scope_as = mz_potential_province
				NOT = {
					any_in_list = {
						list = mz_pool_provinces
						county.duchy = scope:mz_potential_province.county.duchy
					}
				}
			}
			add_to_temporary_list = mz_pool_provinces
		}
	}
	every_neighboring_top_liege_realm_owner = {
		every_realm_province = {
			if = {
				limit = {
					save_temporary_scope_as = mz_potential_province
					NOT = {
						any_in_list = {
							list = mz_pool_provinces
							county.duchy = scope:mz_potential_province.county.duchy
						}
					}
				}
				add_to_temporary_list = mz_pool_provinces
			}
		}
		random_courtier = {
			limit = {
				mz_lesbian_marriage_pulse_trigger = yes
				NOT = { is_in_list = mz_potential_spouses }
			}
			weight = {
				base = 1
				modifier = {
					add = { value = mz_lesbian_marriage_script_value }
				}	
			}
			add_to_temporary_list = mz_potential_spouses
		}
		every_vassal_or_below = {
			limit = {
				highest_held_title_tier >= tier_county
				mz_lesbian_marriage_pulse_trigger = yes
				NOT = { is_in_list = mz_potential_spouses }
			}
			add_to_temporary_list = mz_potential_spouses
			random_courtier = {
				limit = {
					mz_lesbian_marriage_pulse_trigger = yes
					NOT = { is_in_list = mz_potential_spouses }
				}
				weight = {
					base = 1
					modifier = {
						add = { value = mz_lesbian_marriage_script_value }
					}	
				}
				add_to_temporary_list = mz_potential_spouses
			}
		}		
	}
	every_in_list = {
		list = mz_pool_provinces
		save_temporary_scope_as = mz_pool_province

		every_pool_character = {
			province = scope:mz_pool_province
			limit = {
				mz_lesbian_marriage_pulse_trigger = yes
				NOT = { is_in_list = mz_potential_spouses }
			}
			add_to_temporary_list = mz_potential_spouses
		}
	}
	set_variable = {
		name = mz_iterate_potential_spouses
		value = 1
	}
	if = { # Last-second catch if something went wrong.
		limit = { 
			scope:mz_root = { is_in_list = mz_potential_spouses }
		}
		scope:mz_root = { remove_from_list = mz_potential_spouses }
	}

	while = {
		limit = {
			has_variable = mz_iterate_potential_spouses
			list_size = {
				name = mz_potential_spouses
				value >= var:mz_iterate_potential_spouses
			}
		}
		ordered_in_list = {
			list = mz_potential_spouses
			order_by = mz_lesbian_marriage_script_value
			position = {
				value = var:mz_iterate_potential_spouses
				subtract = 1
				min = 0
			}
			save_scope_as = mz_spouse_candidate
		}
		change_variable = {
			name = mz_iterate_potential_spouses
			add = 1
		}
		mz_lesbian_marriage_pulse_effect = { CHARACTER = scope:mz_spouse_candidate } # Attempt to marry the target.
		if = {
			limit = { 
				mz_has_expected_num_wives_trigger = yes
				has_variable = mz_iterate_potential_spouses
			}
			remove_variable = mz_iterate_potential_spouses # Stops the while loop if we're at the spouse limit
		}
	}
	if = {
		limit = { 
			has_variable = mz_iterate_potential_spouses
			list_size = {
				name = mz_potential_spouses
				value <= var:mz_iterate_potential_spouses
			}
		}
		remove_variable = mz_iterate_potential_spouses
	}	
	if = { # If we didn't end up with any lesbian spouse, let's just grab one from court.
		limit = { 
			allowed_more_spouses = yes
			any_spouse = {
				count < 1
				is_female = yes
			}
		}
		if = {
			limit = {
				any_courtier_or_guest = {
					mz_lesbian_marriage_pulse_trigger = yes
					NOT = { this = scope:mz_root }
				}
			}
			random_courtier_or_guest = {
				limit = { 
					mz_lesbian_marriage_pulse_trigger = yes 
					NOT = { this = scope:mz_root }
				}
				weight = {
					base = 1
					opinion_modifier = {
						who = scope:mz_root
						opinion_target = this
						max = 30
						min = -30
						multiplier = 1
					}
					modifier = { 
						has_relation_soulmate = scope:mz_root
						add = 1000
					}
					modifier = {
						has_relation_lover = scope:mz_root
						add = 100
					}
					modifier = {
						attraction > 0
						add = {
							value = attraction
						}
					}				
				}
				save_scope_as = mz_spouse
			}
		}
		else = { # Even after all that, we still couldn't find anyone? Fine, let's just make some random wife.
			create_character = {
				location = scope:mz_root.location
				template = mz_beautiful_young_lady
				save_scope_as = mz_spouse
			}
			add_courtier = scope:mz_spouse
		}
		if = { # Checks if normal or grand wedding. Grand Weddings are fairly rare, mostly for king-tier rulers.
			limit = { 
				exists = scope:mz_spouse
				can_marry_character_trigger = { CHARACTER = scope:mz_spouse }
				NOT = { this = scope:mz_spouse }
			}
			mz_lesbian_marriage_marry_effect = yes
		}		
	}
}

## Updating the lesbian marriage modifiers (for females)
mz_update_lesbian_marriage_effect = {
	save_temporary_scope_as = mz_this_character
	if = {
		limit = { 
			mz_sacred_same_sex_marriage = no
			is_alive = yes
		}
		remove_all_character_modifier_instances = mz_lesbian_union_concubines
		remove_all_character_modifier_instances = mz_lesbian_union_polygamy
		remove_all_character_modifier_instances = mz_lesbian_union_monogamy
	}
	else_if = {
		limit = { mz_sacred_same_sex_marriage = yes }
		if = {
			limit = { is_alive = yes }
			remove_all_character_modifier_instances = mz_lesbian_union_concubines
			remove_all_character_modifier_instances = mz_lesbian_union_polygamy
			remove_all_character_modifier_instances = mz_lesbian_union_monogamy
		}
		if = {
			limit = {
				mz_has_concubines_trigger = yes
				any_consort = { is_female = yes }
				is_alive = yes
				is_female = yes
			}
			every_spouse = {
				limit = {
					is_female = yes
					is_alive = yes
				}
				scope:mz_this_character = {
					add_character_modifier = mz_lesbian_union_concubines
					add_character_modifier = mz_lesbian_union_concubines
					add_character_modifier = mz_lesbian_union_concubines
				}
			}
			every_concubine = {
				limit = {
					is_female = yes
					is_alive = yes
				}
				scope:mz_this_character = { add_character_modifier = mz_lesbian_union_concubines }				
			}
			if = { # If exactly one opposite-sex concubine and primary spouse is female, add one extra
				limit = {
					any_spouse = { is_female = yes }
					any_concubine = {
						count = 1 
						is_female = no
					}
				}
				scope:mz_this_character = { add_character_modifier = mz_lesbian_union_concubines }
			}
		}
		else_if = {
			limit = { 
				mz_has_polygamy_trigger = yes
				is_married = yes
				is_female = yes
			}
			every_spouse = {
				limit = {
					is_female = yes
					is_alive = yes
				}
				scope:mz_this_character = { add_character_modifier = mz_lesbian_union_polygamy }
			}
			if = { # If exactly one opposite-sex spouse and primary spouse is female, add one extra
				limit = {
					exists = scope:mz_this_character.primary_spouse
					scope:mz_this_character.primary_spouse = { is_female = yes }
					any_spouse = {
						count = 1
						is_female = no
					}
				}
				scope:mz_this_character = { add_character_modifier = mz_lesbian_union_polygamy }
			}
		}
		else_if = {
			limit = {
				mz_has_monogamy_trigger = yes
				is_married = yes
				is_female = yes
			}
			every_spouse = {
				limit = {
					is_female = yes
					is_alive = yes
				}
				scope:mz_this_character = { add_character_modifier = mz_lesbian_union_monogamy }
			}
		}
	}	
}

## Updating the homosexual marriage modifiers (for non-female)
mz_update_homosexual_marriage_effect = {
	save_temporary_scope_as = mz_this_character
	if = {
		limit = { 
			mz_sacred_same_sex_marriage = no
			is_alive = yes
		}
		remove_all_character_modifier_instances = mz_homosexual_union_concubines
		remove_all_character_modifier_instances = mz_homosexual_union_polygamy
		remove_all_character_modifier_instances = mz_homosexual_union_monogamy
	}
	else_if = {
		limit = { mz_sacred_same_sex_marriage = yes }
		if = {
			limit = { is_alive = yes }
			remove_all_character_modifier_instances = mz_homosexual_union_concubines
			remove_all_character_modifier_instances = mz_homosexual_union_polygamy
			remove_all_character_modifier_instances = mz_homosexual_union_monogamy
		}
		if = {
			limit = {
				mz_has_concubines_trigger = yes
				any_consort = { is_female = no }
				is_alive = yes
				is_female = no
			}
			every_spouse = {
				limit = {
					is_female = no
					is_alive = yes
				}
				scope:mz_this_character = {
					add_character_modifier = mz_homosexual_union_concubines
					add_character_modifier = mz_homosexual_union_concubines
					add_character_modifier = mz_homosexual_union_concubines
				}
			}
			every_concubine = {
				limit = {
					is_female = no
					is_alive = yes
				}
				scope:mz_this_character = { add_character_modifier = mz_homosexual_union_concubines }				
			}
			if = { # If exactly one opposite-sex concubine and primary spouse is male, add one extra
				limit = {
					any_spouse = { is_female = no }
					any_concubine = {
						count = 1 
						is_female = yes
					}
				}
				scope:mz_this_character = { add_character_modifier = mz_homosexual_union_concubines }
			}			
		}
		else_if = {
			limit = { 
				mz_has_polygamy_trigger = yes
				is_married = yes
				is_female = no
			}
			every_spouse = {
				limit = {
					is_female = no
					is_alive = yes
				}
				scope:mz_this_character = { add_character_modifier = mz_homosexual_union_polygamy }
			}
			if = { # If exactly one opposite-sex spouse and primary spouse is male, add one extra
				limit = {
					scope:mz_this_character.primary_spouse = { is_female = no }
					any_spouse = {
						count = 1
						is_female = yes
					}
				}
				scope:mz_this_character = { add_character_modifier = mz_homosexual_union_polygamy }
			}
		}
		else_if = {
			limit = {
				mz_has_monogamy_trigger = yes
				is_married = yes
				is_female = no
			}
			every_spouse = {
				limit = {
					is_female = no
					is_alive = yes
				}
				scope:mz_this_character = { add_character_modifier = mz_homosexual_union_monogamy }
			}
		}
	}	
}

## Update sacred concubines modifier
mz_update_sacred_concubines_effect = {
	save_temporary_scope_as = mz_this_character
	remove_all_character_modifier_instances = mz_lesbian_union_concubines
	remove_all_character_modifier_instances = mz_homosexual_union_concubines
	if = {
		limit = {
			mz_has_concubines_trigger = yes
			any_consort = { is_female = yes }
			is_alive = yes
			is_female = yes
		}
		every_spouse = {
			limit = {
				is_female = yes
				is_alive = yes
			}
			scope:mz_this_character = {
				add_character_modifier = mz_lesbian_union_concubines
				add_character_modifier = mz_lesbian_union_concubines
				add_character_modifier = mz_lesbian_union_concubines
			}
		}
		every_concubine = {
			limit = {
				is_female = yes
				is_alive = yes
			}
			scope:mz_this_character = { add_character_modifier = mz_lesbian_union_concubines }				
		}
		if = { # One extra modifier if primary spouse is female and exactly one male concubine
			limit = {
				scope:mz_this_character.primary_spouse ?= { is_female = yes }
				any_concubine = {
					count = 1 
					is_female = no
				}
			}
			scope:mz_this_character = { add_character_modifier = mz_lesbian_union_concubines }
		}
	}	
	if = {
		limit = {
			mz_has_concubines_trigger = yes
			any_consort = { is_female = no }
			is_alive = yes
			is_female = no
		}
		every_spouse = {
			limit = {
				is_female = no
				is_alive = yes
			}
			scope:mz_this_character = {
				add_character_modifier = mz_homosexual_union_concubines
				add_character_modifier = mz_homosexual_union_concubines
				add_character_modifier = mz_homosexual_union_concubines
			}
		}
		every_concubine = {
			limit = {
				is_female = no
				is_alive = yes
			}
			scope:mz_this_character = { add_character_modifier = mz_homosexual_union_concubines }				
		}
		if = { # One extra modifier if primary spouse is male and exactly one female concubine
			limit = {
				scope:mz_this_character.primary_spouse ?= { is_female = no }
				any_concubine = {
					count = 1 
					is_female = yes
				}
			}
			scope:mz_this_character = { add_character_modifier = mz_homosexual_union_concubines }
		}			
	}	
}

## OVERWRITE: We don't want a "concubines are blaspheming our marriage" opinion to show up when it shouldn't
# When you take spouses/concubines whose Faith does not permit that union, they will gain opinion penalties.
# This effect adds/updates/replaces/removes those opinion penalties, as approprite to the current situation.
update_active_consort_opinion_effect = {

	# If we currently have any existing consort opinion modifiers, check if they should be downgraded from permanent modifiers to decaying modifiers.
	downgrade_invalid_consort_opinions_effect = { PARTNER = $PARTNER$ }

	if = {
		# If this opinion change was triggered by being divorced/set-aside, we may still technically be married/joined to PARTNER at this moment, but we won't be very shortly and should skip this step.
		limit = {
			NOR = {
				exists = scope:is_being_divorced
				exists = scope:is_being_set_aside
			}
		}

		# Oterwise, apply any new consort opinion effects that are applicable.
		if = {
			# Characters who do not believe in concubinage, but are forced into it, have the harshest opinion penalties.
			limit = {
				is_concubine_of = $PARTNER$
				NOT = { faith = { has_doctrine = doctrine_concubines }}
				NOT = { faith = { has_doctrine = mz_lesbian_marriage_consort_doctrine }} #mz_tag Special doctrine disables
			}
			if = {
				# Harshest opinion penalty if they are a concubine but believe in monogamy
				limit = { faith = { has_doctrine = doctrine_monogamy }}
				add_opinion = {
					target = $PARTNER$
					modifier = concubine_with_monogamous_faith_opinion
				}
			}
			else_if = {
				# Lesser-but-still-harsh opinion penalty if they are a concubine but believe in polygamy
				limit = {
					OR = {
						culture = { has_cultural_tradition = tradition_polygamous }
						faith = { has_doctrine = doctrine_polygamy }
					}
				}
				add_opinion = {
					target = $PARTNER$
					modifier = concubine_with_polygamous_faith_opinion
				}
			}
		}
		else_if = {
			# Characters who are legitimate spouses of their partner, but do not approve of their partner's other spouses/concubines, will have milder opinion penalties.
			limit = {
				is_spouse_of = $PARTNER$
				$PARTNER$ = { any_consort = { count >= 2 }}
				NOT = { faith = { has_doctrine = doctrine_concubines }}
				NOT = { faith = { has_doctrine = tenet_polyamory }}
				NOT = { faith = { has_doctrine = mz_lesbian_marriage_consort_doctrine }} #mz_tag Special doctrine disables
			}
			if = {
				limit = {
					$PARTNER$ = { any_concubine = { count >= 1 }}
				}
				add_opinion = {
					target = $PARTNER$
					modifier = spouse_does_not_believe_in_concubines_opinion
				}
				#Remove the opinion modifier if you flip-flop and go get concubines after getting rid of them all...
				remove_opinion = {
					target = $PARTNER$
					modifier = spouse_does_not_believe_in_former_concubines_opinion
				}
			}
			else_if = {
				limit = {
					NOR = { 
						culture = { has_cultural_tradition = tradition_polygamous }
						faith = { has_doctrine = doctrine_polygamy }
					}
				}
				add_opinion = {
					target = $PARTNER$
					modifier = polygamous_marriage_opinion
				}
			}
		}
		#Same-sex not accepted penalty
		if = {
			limit = {
				allowed_to_marry_same_sex_trigger = no
				sex_same_as = $PARTNER$
			}
			add_opinion = {
				target = $PARTNER$
				modifier = same_sex_with_no_acceptance_opinion
			}
		}
	}
}