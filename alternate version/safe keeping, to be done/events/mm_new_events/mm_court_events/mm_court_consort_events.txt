namespace = mz_court_consort

# Recruiting a court consort
mz_court_consort.1001 = { # What tier of consort do we want?
	type = character_event
	title = mz_court_consort.1001.t
	desc = {
		desc = mz_court_consort.1001.desc_opening
		first_valid = {
			triggered_desc = {
				trigger = { is_female = yes }
				desc = mz_court_consort.1001.desc_male_consort
			}
			desc = mz_court_consort.1001.desc_female_consort
		}
	}
	theme = dynasty
	override_background = { reference = bedchamber }
	left_portrait = {
		character = root
		animation = personality_rational
	}

	trigger = {
		is_ai = no
		NOR = { 
			employs_court_position = mz_court_consort_court_position
			any_court_position_holder = { type = mz_court_consort_court_position }
		}
		is_landed = yes
		is_ruler = yes
		highest_held_title_tier >= tier_county
		allowed_to_marry_same_sex_trigger = yes
	}
	# We handle how the AI selects consorts differently because they will frequently be broke when selecting one. So we don't choose based on the gold they have.
	immediate = { # Instead, they choose based on level of splendour, and get a temporary income penalty based on the tier. This way they get appropriate-tier consorts.
	}

	option = {
		name = mz_court_consort.1001.a # Lusty lowborn
		custom_description_no_bullet = { 
			text = mz_court_consort.1001.a_tt 
		}
		if = {
			limit = { is_ai = no }
			trigger_event = { 
				id = mz_court_consort.1002
				days = { 7 14 }
			}
		}
		ai_chance = { base = 0 }
	}

	option = {
		name = mz_court_consort.1001.b # Fine specimen
		custom_description_no_bullet = { 
			text = mz_court_consort.1001.b_tt 
		}
		if = {
			limit = { is_ai = no }
			trigger_event = { 
				id = mz_court_consort.1003
				days = { 7 14 }
			}
		}
		ai_chance = { base = 0 }
	}

	option = {
		name = mz_court_consort.1001.c # The expensive option
		custom_description_no_bullet = { 
			text = mz_court_consort.1001.c_tt 
		}
		if = {
			limit = { is_ai = no }
			trigger_event = { 
				id = mz_court_consort.1004
				days = { 7 14 }
			}
		}
		ai_chance = { base = 0 }
	}

	option = {
		name = mz_court_consort.1001.d # Actually, nevermind
		remove_decision_cooldown = mz_hire_consort_decision
		trigger = { is_ai = no }
		ai_chance = { base = 10 }
	}

	option = { # AI always chooses this, it has no effect.
		name = mz_court_consort.1001.d # Actually, nevermind
		exclusive = yes
		trigger = { is_ai = yes }
		ai_chance = { base = 100 }
	}
}

mz_court_consort.1002 = { # Recruiting a lusty lowborn
	type = character_event
	title = mz_court_consort.1002.t
	desc = mz_court_consort.1002.desc
	theme = dynasty
	override_background = { reference = alley_day }

	trigger = { 
		is_landed = yes
		is_alive = yes
		is_imprisoned = no
		is_ai = no
	}

	on_trigger_fail = {
		trigger_event = { id = mz_test.9999 }
	}

	left_portrait = {
		character = root
	}
	right_portrait = {
		character = scope:mz_lowtier_consort_option
	}

	immediate = {
		mz_find_or_create_lowtier_consort = yes
		hidden_effect = { add_visiting_courtier = scope:mz_lowtier_consort_option }
	}

	option = {
		name = mz_court_consort.1002.a # Recruit the consort
		hidden_effect = { add_courtier = scope:mz_lowtier_consort_option }
		mz_consort_marriage_or_concubine_effect = { CHARACTER = scope:mz_lowtier_consort_option }
		appoint_court_position = {
			recipient = scope:mz_lowtier_consort_option
			court_position = mz_court_consort_court_position
		}
		pay_short_term_gold = {
			target = scope:mz_lowtier_consort_option
			gold = minor_gold_value
		}
		ai_chance = { base = 0 }
	}

	option = {
		name = mz_court_consort.1002.b # Actually, nevermind
		hidden_effect = {
			if = { 
				limit = { 
					scope:mz_lowtier_consort_option = { has_character_flag = mz_created_consort }
				}
				scope:mz_lowtier_consort_option = {
					death = { death_reason = death_vanished }
				}
			}
		}
		ai_chance = { base = 0 }
	}
}

mz_court_consort.1003 = { # Recruiting a fine specimen
	type = character_event
	title = mz_court_consort.1003.t
	desc = mz_court_consort.1003.desc
	theme = dynasty
	override_background = { reference = courtyard }

	trigger = { 
		is_landed = yes
		is_alive = yes
		is_imprisoned = no
		is_ai = no
	}

	on_trigger_fail = {
		trigger_event = { id = mz_test.9999 }
	}

	left_portrait = {
		character = root
	}
	right_portrait = {
		character = scope:mz_midtier_consort_option
	}

	immediate = {
		mz_find_or_create_midtier_consort = yes
		hidden_effect = { add_visiting_courtier = scope:mz_midtier_consort_option }
	}

	option = {
		name = mz_court_consort.1003.a # Recruit the consort
		hidden_effect = { add_courtier = scope:mz_midtier_consort_option }
		mz_consort_marriage_or_concubine_effect = { CHARACTER = scope:mz_midtier_consort_option }	
		appoint_court_position = {
			recipient = scope:mz_midtier_consort_option
			court_position = mz_court_consort_court_position
		}
		pay_short_term_gold = {
			target = scope:mz_midtier_consort_option
			gold = medium_gold_value
		}
		ai_chance = { base = 0 }
	}

	option = {
		name = mz_court_consort.1003.b # Actually, nevermind
		hidden_effect = {
			if = { 
				limit = { 
					scope:mz_midtier_consort_option = { has_character_flag = mz_created_consort }
				}
				scope:mz_midtier_consort_option = {
					death = { death_reason = death_vanished }
				}
			}
		}
		ai_chance = { base = 0 }
	}
}

mz_court_consort.1004 = { # Recruiting a genetic paragon
	type = character_event
	title = mz_court_consort.1004.t
	desc = mz_court_consort.1004.desc
	theme = dynasty
	override_background = { reference = garden }

	trigger = { 
		is_landed = yes
		is_alive = yes
		is_imprisoned = no
		is_ai = no
	}

	on_trigger_fail = {
		trigger_event = { id = mz_test.9999 }
	}

	left_portrait = {
		character = root
	}
	right_portrait = {
		character = scope:mz_hightier_consort_option
	}

	immediate = {
		mz_find_or_create_hightier_consort = yes
		hidden_effect = { add_visiting_courtier = scope:mz_hightier_consort_option }
	}

	option = {
		name = mz_court_consort.1004.a # Recruit the consort
		hidden_effect = { add_courtier = scope:mz_hightier_consort_option }	
		mz_consort_marriage_or_concubine_effect = { CHARACTER = scope:mz_hightier_consort_option }	
		appoint_court_position = {
			recipient = scope:mz_hightier_consort_option
			court_position = mz_court_consort_court_position
		}
		pay_short_term_gold = {
			target = scope:mz_hightier_consort_option
			gold = major_gold_value
		}
		ai_chance = { base = 0 }
	}

	option = {
		name = mz_court_consort.1004.c # Actually, nevermind
		hidden_effect = {
			if = { 
				limit = { 
					scope:mz_hightier_consort_option = { has_character_flag = mz_created_consort }
				}
				scope:mz_hightier_consort_option = {
					death = { death_reason = death_vanished }
				}
			}
		}
		ai_chance = { base = 0 }
	}
}

mz_court_consort.1100 = { # Getting a consort for an AI ruler
	type = character_event
	hidden = yes

	trigger = {
		is_ai = yes
		can_employ_court_position_type = mz_court_consort_court_position
		NOR = { 
			employs_court_position = mz_court_consort_court_position
			any_court_position_holder = { type = mz_court_consort_court_position }
		}
		is_landed = yes
		is_ruler = yes
		highest_held_title_tier >= tier_barony
		allowed_to_marry_same_sex_trigger = yes		
	}

	immediate = { 
		if = {
			limit = { 
				is_ai = yes
				any_court_position_holder = { 
					type = mz_court_consort_court_position
					count <= 0
				}
			}
			# First thing. Let's check if any of our current spouses or concubines can fit the bill.
			if = {
				limit = { 
					any_consort = {
						can_be_employed_as = mz_court_consort_court_position
						NOT = { has_court_position = mz_court_consort_court_position }
						aptitude:mz_court_consort_court_position > 0
					}
				}
				random_consort = {
					limit = {
						can_be_employed_as = mz_court_consort_court_position
						NOT = { has_court_position = mz_court_consort_court_position }
						aptitude:mz_court_consort_court_position > 0						
					}
					save_scope_as = mz_eligible_consort
				}
				appoint_court_position = {
					recipient = scope:mz_eligible_consort
					court_position = mz_court_consort_court_position
				}				
			}
			else_if = { # We have opposite-sex consorts, but non are eligible.
				limit = {
					any_consort = {
						sex_opposite_of = root
					}
				}
				if = {
					limit = { 
						OR = {
							mz_has_concubines_trigger = yes
							mz_has_monogamy_trigger = yes
						}
						any_concubine = { 
							sex_opposite_of = root
							count > 0 
						}
					}
					random_concubine = {
						limit = { sex_opposite_of = root }
						save_scope_as = mz_selected_consort
					}
					remove_concubine ?= scope:mz_selected_consort
					mz_ai_create_a_consort_effect = yes
				}
				else_if = {
					limit = {
						any_spouse = { count = 4 }
						any_spouse = { sex_opposite_of = root }
					}
					random_spouse = { 
						limit = { sex_opposite_of = root }
						divorce_effect = {
							DIVORCER = root
							DIVORCEE = this
						}						
					}
					mz_ai_create_a_consort_effect = yes
				}
			}
			else_if = { # We have too many consorts, and they're all same-sex somehow. This shouldn't happen, but maybe the player intervened to make it happen.
				limit = {
					OR = {
						any_spouse = { count = 4 }
						AND = {
							allowed_more_concubines = no
							mz_has_concubines_trigger = yes
						}
						AND = {
							allowed_more_concubines = no
							mz_has_monogamy_trigger = yes
						}
					}
				}
				if = {
					limit = {
						any_spouse = { count = 4 }
					}
					random_spouse = {
						limit = { 
							NOT = { this = root.primary_spouse }
						}
						divorce_effect = {
							DIVORCER = root
							DIVORCEE = this
						}						
					}
					mz_ai_create_a_consort_effect = yes
				}
				else = {
					random_concubine = {
						save_scope_as = mz_selected_consort
					}
					remove_concubine ?= scope:mz_selected_consort
					mz_ai_create_a_consort_effect = yes
				}
			}
			else = { # We just make a consort for the AI and appoint it.
				mz_ai_create_a_consort_effect = yes
			}
		}
	}

	after = {
		trigger_event = {
			id = mz_court_consort.2001
			days = 3
		}
	}
}

mz_court_consort.2001 = { # Lay with Court Consort
	type = character_event
	title = mz_court_consort.2001.t
	desc = mz_court_consort.2001.desc
	theme = dynasty
	override_background = { reference = bedchamber }

	trigger = { 
		is_landed = yes
		is_alive = yes
		is_imprisoned = no
	}

	left_portrait = { character = root }
	right_portrait = {
		character = scope:mz_court_consort
		animation = flirtation
	}

	immediate = {
		random_court_position_holder = {
			type = mz_court_consort_court_position
			save_scope_as = mz_court_consort
		}
	}

	option = {
		name = { 
			trigger = { is_attracted_to_gender_of = scope:mz_court_consort }
			text = mz_court_consort.2001.a_attracted
		}
		name = {
			trigger = { 
				NOT = { is_attracted_to_gender_of = scope:mz_court_consort }
			}
			text = mz_court_consort.2001.a_notattracted
		}
		send_interface_toast = {
			title = mz_court_consort.2001.a_toast
			left_icon = scope:mz_court_consort
			mz_had_sex_with_consort_effect = { 
				CHARACTER = scope:mz_court_consort 
				PREGNANCY_CHANCE = mz_consort_sex_pregnancy_chance 
			}
		}
		ai_chance = { base = 100 }
	}

	option = {
		name = mz_court_consort.2001.b
		reverse_add_opinion = {
			target = scope:mz_court_consort
			modifier = disappointed_opinion
			opinion = -20
		}
		ai_chance = { base = 0 }
	}
}