#### Outcome Events for Convert Scheme
namespace = mz_convert_outcome

### Maintenance events
# 0001 Initial event
# 0002 Hidden event handling rolls
# 0004 Scheme ends (target converted on their own)
# 0005 Scheme ends (target died)

### Success Events For Owner
# 2000 Convert the Pope
# 2010 Both Revelers/Drunkards
# 2020 Excuse Me!
# 2030 Secret Meeting (Both High Intrigue)
# 2040 Married target
# 2050 Go to Target's Chambers

### Success Events for Target - For now, unnecessary, so this will be empty, since player will never be target, so all effects will be handled in owner events

### Failure Events for Owner
# 4001 Gentle Refusal
# 4002 Harsh Refusal
# 4003 Harsh Refusal and exposed
# 4004 Incest Refusal
# 4005 Discovery (failure)
# 4900 Liege event for discovery

### Hard Reject Events (Blockers)
# 8101 Incest decision point (target event)
# 8102 Hard block (incest)
# 8103 Hard block + revealed (incest)

## Maintenance events
mz_convert_outcome.0001 = { #I am a player and there is a discovery chance. Do I want to take the risk?
	type = character_event
	title = mz_convert_outcome.0001.t
	desc = {
		desc = mz_convert_outcome.0001.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:scheme.scheme_success_chance >= 60 }
				desc = mz_convert_outcome.0001.positive.desc
			}
			desc = mz_convert_outcome.0001.negative.desc
		}
	}
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		scope:target = { liege = { save_scope_as = discoverer } }
	}

	option = {
		name = mz_convert_outcome.0001.a
		custom_tooltip = mz_convert_outcome.0001.a.tt
		trigger_event = mz_convert_outcome.0002 #Do the rolls!

		stress_impact = {
			craven = minor_stress_impact_gain
		}
	}

	option = {
		name = mz_convert_outcome.0001.b
		scope:scheme = { end_scheme = yes }
	}
}

mz_convert_outcome.0002 = {
	type = character_event

	hidden = yes

	immediate = {
		#SUCCESS ROLL
		random = {
			chance = scope:scheme.scheme_success_chance

			save_scope_value_as = {
				name = scheme_successful
				value = yes
			}
		}

		#DISCOVERY ROLL
		save_scope_value_as = {
			name = discovery_chance
			value = {
				value = 100
				subtract = scope:scheme.scheme_secrecy
			}
		}

		random = {
			chance = scope:discovery_chance
			save_scope_value_as = {
				name = scheme_discovered
				value = yes
			}
		}

		if = {
			limit = {
				exists = scope:scheme_successful
			}
			mz_convert_change_sexual_orientation_effects = { CHARACTER = scope:target } # By making this happen before the event fires, we can make a nice tooltip
			trigger_event = {
				on_action = mz_convert_scheme_success
			}
		}
		else = {
			trigger_event = {
				on_action = mz_convert_scheme_failure
			}
		}
	}
}

# mz_convert_outcome.0003 # Would be player character reaction event, but non-AI targets are not allowed at this point

mz_convert_outcome.0004 = { #Scheme ends; target becomes lesbian/bisexual -- another person converted them most likely
	type = character_event
	title = mz_convert_outcome.0004.t
	desc = mz_convert_outcome.0004.desc
	
	theme = seduce_scheme
	left_portrait = scope:target
	#No scheme, no widget

	option = {
		name = mz_convert_outcome.0004.a
	}
}

mz_convert_outcome.0005 = { #Scheme ends; target died
	type = character_event
	title = mz_convert_outcome.0005.t
	desc = mz_convert_outcome.0005.desc
	
	theme = seduce_scheme
	left_portrait = scope:target
	#No scheme, no widget

	option = {
		name = mz_convert_outcome.0005.a
	}
}

## Success Events For Owner
mz_convert_outcome.2000 = { #Convert the Head of Faith
	type = character_event
	title = mz_convert_outcome.2000.t
	desc = mz_convert_outcome.2000.desc
	
	theme = seduce_scheme
	override_background = { reference = temple }
	left_portrait = { 
		character = scope:owner
		animation = happiness
	}
	right_portrait = { 
		character = scope:target
		animation = flirtation
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:target = { is_ai = yes }
		faith = {
			religious_head = scope:target
			has_doctrine_parameter = spiritual_head_of_faith
		}
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		scope:target.primary_spouse = { save_scope_as = target_spouse }
		play_music_cue = "mx_cue_seduction"
	}

	option = { #Become lovers
		name = mz_convert_outcome.2000.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2000.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3000 }
		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.2010 = { #Both revelers/drunkards
	type = character_event
	title = mz_convert_outcome.2010.t
	desc = mz_convert_outcome.2010.desc
	
	theme = seduce_scheme
	override_background = { reference = tavern }
	left_portrait = { 
		character = scope:owner
		animation = flirtation
	}
	right_portrait = { 
		character = scope:target
		animation = admiration
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	
	trigger = {
		OR = {
			has_trait = drunkard
			has_trait = lifestyle_reveler
		}
		scope:target = { 
			OR = {
				has_trait = drunkard
				has_trait = lifestyle_reveler
			}
		}
		scope:target = { is_ai = yes }
	}

	weight_multiplier = {
		base = 2
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		scope:target.primary_spouse = { save_scope_as = target_spouse }
		play_music_cue = "mx_cue_seduction"
	}

	option = { #Become lovers
		name = mz_convert_outcome.2010.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2010.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3010 }
		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.2020 = { #excusing the self
	type = character_event
	title = mz_convert_outcome.2020.t
	desc = mz_convert_outcome.2020.desc
	
	theme = seduce_scheme
	override_background = { reference = bedchamber }
	left_portrait = { 
		character = scope:owner
		animation = flirtation
	}
	right_portrait = { 
		character = scope:target
		animation = love
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		if = {
			limit = {
				exists = scope:target.primary_spouse
			}
			scope:target.primary_spouse = { save_scope_as = target_spouse }
		}
		play_music_cue = "mx_cue_seduction"
	}

	option = { #Become lovers
		name = mz_convert_outcome.2020.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2020.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3020 }
		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.2030 = { #Both intrigue-focused (secret meeting)
	type = character_event
	title = mz_convert_outcome.2030.t
	desc = mz_convert_outcome.2030.desc
	
	theme = seduce_scheme
	override_background = { reference = courtyard }
	left_portrait = { 
		character = scope:owner
		animation = happiness
	}
	right_portrait = { 
		character = scope:target
		animation = flirtation
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	weight_multiplier = {
		base = 3
	}
	
	trigger = {
		OR = {
			intrigue >= high_skill_rating
			has_lifestyle = intrigue_lifestyle
		}
		scope:target = { 
			OR = {
				intrigue >= high_skill_rating
				has_lifestyle = intrigue_lifestyle
			}
		}
		scope:target = { is_ai = yes }
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		scope:target.primary_spouse = { save_scope_as = target_spouse }
		play_music_cue = "mx_cue_seduction"
	}

	option = { #Become lovers
		name = mz_convert_outcome.2030.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2030.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3030 }
		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.2040 = { #Married woman (not if married to self), married to no women
	type = character_event
	title = mz_convert_outcome.2040.t
	desc = mz_convert_outcome.2040.desc
	
	theme = seduce_scheme
	override_background = { reference = corridor_night }
	left_portrait = { 
		character = scope:owner
		animation = happiness
	}
	right_portrait = { 
		character = scope:target
		animation = flirtation
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	weight_multiplier = {
		base = 1.5
	}
	
	trigger = {
		scope:target = { 
			is_married = yes
			any_spouse = { 
				count = all
				is_female = no
			}
		}
		NOT = {
			any_consort = { this = scope:target }
		}
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		scope:target.primary_spouse = { save_scope_as = target_spouse }
		play_music_cue = "mx_cue_seduction"
	}

	option = { #Become lovers
		name = mz_convert_outcome.2040.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2040.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3040 }
		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.2050 = { #go to target's chambers
	type = character_event
	title = mz_convert_outcome.2050.t
	desc = mz_convert_outcome.2050.desc
	
	theme = seduce_scheme
	override_background = { reference = bedchamber }
	left_portrait = { 
		character = scope:owner
		animation = flirtation
	}
	right_portrait = { 
		character = scope:target
		animation = admiration
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	weight_multiplier = {
		base = 0.5
		modifier = { #More likely if you're in the same court
			add = 0.7
			scope:target = { is_in_the_same_court_as = scope:owner }
		}
		modifier = { #Less likely if target is married
			add = -0.2
			scope:target = { is_married = yes }
		}
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		play_music_cue = "mx_cue_seduction"
	}

	option = { #Become lovers
		name = mz_convert_outcome.2050.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2050.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3050 }
		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.2060 = { # vassal
	type = character_event
	title = mz_convert_outcome.2060.t
	desc = mz_convert_outcome.2060.desc
	
	theme = seduce_scheme
	override_background = { reference = throne_room }
	left_portrait = { 
		character = scope:target
		animation = admiration
	}
	right_portrait = { 
		character = scope:owner
		animation = personality_bold
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:target = { 
			top_liege = scope:owner 
			is_landed = yes
			is_clergy = no # The flavor of this event doesn't really fit Theocratic vassals
		}
	}
	
	weight_multiplier = {
		base = 0.5
		modifier = {
			highest_held_title_tier < tier_county # Lower chance for baron-tier vassals
			factor = 0.2
		}
		modifier = {
			add = 1.5
			scope:target = { liege = scope:owner } # Direct vassals are a lot more likely
		}
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		play_music_cue = "mx_cue_seduction"
		scope:owner = {
			if = {
				limit = { exists = capital_province }
				capital_province = {
					barony = {
						save_scope_as = court_location
					}
				}
			}
			else_if = {
				limit = { exists = liege }
				liege.capital_province = {
					barony = {
						save_scope_as = court_location
					}
				}
			}
			else = {
				location.barony = { save_scope_as = court_location }
			}
		}
	}

	option = { #Become lovers
		name = mz_convert_outcome.2060.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2060.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3060 }
		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.2070 = { # Uses sex scene generator
	type = character_event
	title = mz_convert_outcome.2070.t
	desc = {
		desc = mz_convert_outcome.2070.desc_opening
		desc = mz_convert_outcome.2070.desc_ending
	}
	
	theme = seduce_scheme
	left_portrait = { 
		character = scope:owner
		animation = flirtation
	}
	right_portrait = { 
		character = scope:target
		animation = happiness
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOR = {
			has_trait = chaste
			scope:target = { has_trait = chaste }
		}
	}
	
	weight_multiplier = {
		base = 0.5
		modifier = {
			add = 1
			scope:target = { has_trait = lustful }
		}
		modifier = {
			add = 1
			has_trait = lustful
		}
		modifier = {
			add = -2
			OR = {
				has_sexuality = asexual
				scope:target = { has_sexuality = asexual }
			}
		}
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		play_music_cue = "mx_cue_seduction"
		hidden_effect = {
			random = {
				chance = 30
				set_random_sex_scene_location_effect = yes
				transfer_sex_scene_location_to_character_effect = { CHARACTER = scope:target }
			}
		}
	}

	option = { #Become lovers
		name = mz_convert_outcome.2070.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2070.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3070 }
		scope:scheme = { end_scheme = yes }	
	}
}

scripted_trigger mz_likes_outdoors = {
	OR = {
		has_trait = lifestyle_hunter
		has_trait = witch
		any_secret = { secret_type = secret_witch }
		has_trait = lifestyle_herbalist
		has_trait = athletic
		AND = {
			faith = { has_doctrine = tenet_sanctity_of_nature }
			NOT = { has_trait = cynical }
		}
	}
}

mz_convert_outcome.2080 = { # The Great Outdoors
	type = character_event
	title = mz_convert_outcome.2080.t
	desc = mz_convert_outcome.2080.desc
	
	theme = seduce_scheme
	override_background = { reference = terrain }
	left_portrait = { 
		character = scope:target
		animation = flirtation
	}
	right_portrait = { 
		character = scope:owner
		animation = love
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:target = { mz_likes_outdoors = yes }
		scope:owner = { mz_likes_outdoors = yes }
	}
	
	weight_multiplier = {
		base = 1
		modifier = { # If owner's capital has less development, this event is more likely
			exists = scope:owner.capital_county
			scope:owner.capital_county = {
				development_level <= medium_development_level
			}
			factor = 1.5
		}
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		play_music_cue = "mx_cue_seduction"
		scope:owner = {
			if = {
				limit = { exists = capital_province }
				capital_province = {
					barony = {
						save_scope_as = court_location
					}
				}
			}
			else_if = {
				limit = { exists = liege }
				liege.capital_province = {
					barony = {
						save_scope_as = court_location
					}
				}
			}
			else = {
				location.barony = { save_scope_as = court_location }
			}
		}
	}

	option = { #Become lovers
		name = mz_convert_outcome.2080.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2080.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3060 }
		scope:scheme = { end_scheme = yes }	
	}
}

## Conditional events for certain specific relationships - always trigger if conditions are met instead of default events
mz_convert_outcome.2501 = { # Family but not married
	type = character_event
	title = mz_convert_outcome.2501.t
	desc = {
		desc = mz_convert_outcome.2501.desc
		first_valid = {
			triggered_desc = { #Sisters?
				trigger = { scope:target = { is_sibling_of = scope:owner } }
				desc = mz_convert_outcome.2501.desc.ending_sisters
			}
			triggered_desc = { #Cousins?
				trigger = { scope:target = { is_cousin_of = scope:owner } }
				desc = mz_convert_outcome.2501.desc.ending_cousins
			}
			desc = mz_convert_outcome.2501.desc.ending_other #Any other familial relationship
		}
	}
	
	theme = seduce_scheme
	override_background = { reference = bedchamber }
	left_portrait = { 
		character = scope:target
		animation = flirtation
	}
	right_portrait = { 
		character = scope:owner
		animation = happiness
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		is_close_or_extended_family_of = scope:target
		NOT = { 
			any_consort = { this = scope:target }
		}
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		play_music_cue = "mx_cue_seduction"
		scope:owner = {
			if = {
				limit = { exists = capital_province }
				capital_province = {
					barony = {
						save_scope_as = court_location
					}
				}
			}
			else_if = {
				limit = { exists = liege }
				liege.capital_province = {
					barony = {
						save_scope_as = court_location
					}
				}
			}
			else = {
				location.barony = { save_scope_as = court_location }
			}
		}
	}

	option = { #Become lovers
		name = mz_convert_outcome.2501.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2501.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3501 }
		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.2511 = { # Clergy (carnal faith)
	type = character_event
	title = mz_convert_outcome.2511.t
	desc = mz_convert_outcome.2511.desc
	
	theme = seduce_scheme
	override_background = { reference = temple }
	left_portrait = { 
		character = scope:owner
		animation = admiration
	}
	right_portrait = { 
		character = scope:target
		animation = flirtation
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:target = { is_clergy = yes }
		scope:target.faith = root.faith
		faith = { trait_is_virtue = lustful }
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		play_music_cue = "mx_cue_seduction"
	}

	option = { #Become lovers
		name = mz_convert_outcome.2511.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2511.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3511 }
		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.2521 = { # Convert your concubine
	type = character_event
	title = mz_convert_outcome.2521.t
	desc = mz_convert_outcome.2521.desc
	
	theme = seduce_scheme
	override_background = { reference = bedchamber }
	left_portrait = { 
		character = scope:owner
		animation = love
	}
	right_portrait = { 
		character = scope:target
		animation = personality_bold
		triggered_outfit = { # Standard nudity
			trigger = { age >= 18 }
			outfit_tags = { no_clothes }
		}			
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:target = { is_concubine_of = scope:owner }
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		play_music_cue = "mx_cue_seduction"
	}

	option = { #Become lovers
		name = mz_convert_outcome.2521.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2521.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3521 }
		scope:scheme = { end_scheme = yes }
	}
}

mz_convert_outcome.2531 = { # Convert your spouse
	type = character_event
	title = mz_convert_outcome.2531.t
	desc = mz_convert_outcome.2531.desc
	
	theme = seduce_scheme
	override_background = { reference = bedchamber }
	left_portrait = { 
		character = scope:owner
		animation = love
	}
	right_portrait = { 
		character = scope:target
		animation = flirtation			
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:target = { is_spouse_of = scope:owner }
	}

	immediate = {
		mz_owner_convert_sex_effect = yes
		if = {
			limit = { 
				scope:target = { has_sexuality = bisexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = bisexual } }
		}
		else_if = {
			limit = { 
				scope:target = { has_sexuality = homosexual }
			}
			show_as_tooltip = { scope:target = { set_sexuality = homosexual } }			
		}
		play_music_cue = "mx_cue_seduction"
	}

	option = { #Become lovers
		name = mz_convert_outcome.2531.a	
		mz_owner_convert_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #Conversion only
		name = mz_convert_outcome.2531.b
		mz_owner_convert_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		# scope:target = { trigger_event = mz_convert_outcome.3501 }
		scope:scheme = { end_scheme = yes }
	}
}

# Discovery on success
mz_convert_outcome.2900 = { #sends discovery event to liege
	type = character_event
	title = mz_convert_outcome.2900.t
	desc = {
		desc = mz_convert_outcome.2900.start.desc
		triggered_desc = {
			trigger = { exists = scope:capital }
			desc = mz_convert_outcome.2900.capital.desc
		}
		desc = mz_convert_outcome.2900.end.desc
	}
	
	theme = seduce_scheme
	override_background = {
		reference = throne_room
	}
	left_portrait = scope:target
	right_portrait = scope:target_liege
	#No widget

	trigger = {
		exists = scope:target.liege
	}

	immediate = {
		scope:target = {
			liege = {
				save_scope_as = target_liege

				if = {
					limit = { exists = capital_barony }
					capital_barony = { save_scope_as = capital }
				}
			}
		}
	}

	option = {
		name = mz_convert_outcome.2900.a
		
		show_as_tooltip = {
			mz_convert_outcome_success_discovered_effect = yes #This is actually applied in target_liege's event mz_convert_outcome.3901
		}

		scope:target.liege = {
			trigger_event = mz_convert_outcome.3901
		}
	}
}

## Discovery Event for Liege
mz_convert_outcome.3901 = { #Triggers for liege, can be player
	type = character_event
	title = mz_convert_outcome.3901.t
	desc = mz_convert_outcome.3901.desc
	
	theme = seduce_scheme
	override_background = {
		reference = sitting_room
	}
	left_portrait = scope:owner
	right_portrait = scope:target
	#No scheme, no widget

	immediate = {
		random_dummy_gender_servant_effect = yes
	}

	option = {
		name = mz_convert_outcome.3900.a
		
		scope:target = { mz_convert_outcome_success_discovered_effect = yes }
	}
}

### Target Events (if added, this will be needed to add to owner events)
#show_as_tooltip = {
#	scope:scheme = {
#		end_scheme = yes
#	}
#}

### Failure Events for Owner
mz_convert_outcome.4001 = { #Gentle refusal
	type = character_event
	title = mz_convert_outcome.4001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:target = { relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = root } } }
				desc = mz_convert_outcome.4001.incest.desc
			}
			desc = mz_convert_outcome.4001.default.desc
		}
	}
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		NOT = { exists = scope:scheme_discovered }
	}

	weight_multiplier = {
		base = 0.75
		modifier = {
			reverse_opinion = {
				target = scope:target
				value >= high_positive_opinion
			}
			factor = 1.3
		}
		modifier = {
			OR = {
				has_relation_friend = scope:target
			}
			factor = 1.3
		}
		modifier = { #Very unlikely if they don't dislike you
			NOR = {
				reverse_opinion = {
					target = scope:target
					value >= low_positive_opinion
				}
				AND = {
					scope:target = { ai_compassion >= medium_positive_ai_value }
					reverse_opinion = {
						target = scope:target
						value >= low_negative_opinion
					}
				}
			}
			factor = 0.1
		}
	}

	immediate = {
		scope:target = {
			if = {
				limit = { root = { is_ai = no }	}
				assign_quirk_effect = yes
			}
		}
	}

	option = {
		name = mz_convert_outcome.4001.a

		scope:target = { mz_convert_cooldown_for_character_effect = { CHARACTER = scope:owner } }

		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.4002 = { #Harsh Refusal
	type = character_event
	title = mz_convert_outcome.4002.t
	desc = mz_convert_outcome.4002.desc
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		OR = {
			reverse_opinion = { #Dislikes you
				target = scope:target
				value < 0
			}
			AND = { #Thinks that you're ugly
				scope:target = { ai_compassion < medium_positive_ai_value }
				attraction < 0
			}
			ai_values_divergence = { #Very different
				target = scope:target
				value >= high_ai_values_divergence
			}
			scope:target = { has_trait = chaste } #Chaste
			scope:target = { #This is not honorable
				trait_is_shunned_or_criminal_in_my_or_lieges_faith_trigger = { TRAIT = adulterer GENDER_CHARACTER = scope:target }
				OR = {
					ai_honor >= low_positive_ai_value
					has_trait = zealous
					has_trait = honest
				}
			}
		}
		NOT = { exists = scope:scheme_discovered }

		# Disabled by Graceful Recovery Perk
		NOT = { has_perk = graceful_recovery_perk }
	}

	weight_multiplier = {
		base = 1
		modifier = {
			reverse_opinion = {
				target = scope:target
				value >= high_positive_opinion
			}
			factor = 0.1
		}
	}


	option = {
		name = mz_convert_outcome.4002.a

		scope:target = { mz_convert_block_character_effect = { CHARACTER = scope:owner } }

		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.4003 = { #Harsh refusal and exposure
	type = character_event
	title = mz_convert_outcome.4003.t
	desc = {
		random_valid = {
			triggered_desc = { #They have a mean plot
				trigger = {
					scope:target = {
						OR = {
							opinion = {
								target = root
								value < 0
							}
							ai_honor <= low_negative_ai_value
							ai_compassion <= low_negative_ai_value
							ai_vengefulness >= low_positive_ai_value
							has_trait = sadistic
							has_trait = vengeful
							has_trait = deceitful
						}
					}
					NOR = {
						has_trait = compassionate
						has_trait = chaste
						has_trait = zealous
					}
				}
				desc = mz_convert_outcome.4003.plot.desc
			}
			desc = mz_convert_outcome.4003.default.desc
		}
	}
	theme = seduce_scheme
	left_portrait = {
		character = scope:target
		animation = anger
	}

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		OR = {
			#Regular conditions
			reverse_opinion = { #Dislikes you
				target = scope:target
				value < 0
			}
			AND = { #Thinks that you're ugly
				scope:target = { ai_compassion < medium_positive_ai_value }
				attraction < 0
			}
			ai_values_divergence = { #Very different
				target = scope:target
				value >= high_ai_values_divergence
			}
			scope:target = { has_trait = chaste } #Chaste
			scope:target = { #This is not honorable
				trait_is_shunned_or_criminal_in_my_or_lieges_faith_trigger = { TRAIT = adulterer GENDER_CHARACTER = scope:target }
				OR = {
					ai_honor >= low_positive_ai_value
					has_trait = zealous
					has_trait = honest
				}
			}
			#Was triggered by player choice
			#exists = scope:target_chose_mean_reject
		}
		NOT = { is_consort_of = scope:target }

		#Disabled by Graceful Recovery Perk
		NOT = { has_perk = graceful_recovery_perk }
	}

	weight_multiplier = {
		base = 0.5
		modifier = {
			scope:target = { ai_vengefulness >= medium_positive_ai_value }
			add = 1
		}
		modifier = {
			scope:target = { ai_compassion < medium_positive_ai_value }
			add = 1
		}
		modifier = {
			has_relation_rival = scope:target
			add = 2
		}
		modifier = {
			has_trait = zealous
			add = 1
		}
		modifier = {
			#A fellow homo-/bisexual character will hesitate to call you out in public
			scope:target = { relation_with_character_is_sodomy_in_my_or_lieges_faith_trigger = { CHARACTER = root } }
			add = -0.5
		}
	}

	immediate = { play_music_cue = "mx_cue_negative" }

	option = {
		name = {
			text = mz_convert_outcome.4003.a.plot
			trigger = {
				scope:target = {
					OR = {
						opinion = {
							target = root
							value < 0
						}
						ai_honor <= low_negative_ai_value
						ai_compassion <= low_negative_ai_value
						ai_vengefulness >= low_positive_ai_value
						has_trait = sadistic
						has_trait = vengeful
						has_trait = deceitful
					}
				}
				NOR = {
					has_trait = compassionate
					has_trait = chaste
					has_trait = zealous
				}
			}
		}
		name = mz_convert_outcome.4003.a.default
		if = {
			limit = {
				OR = {
					scope:target = { is_landed = yes }
					AND = {
						exists = host
						host = root
					}
				}
			}
			mz_convert_outcome_publicised_attempted_crimes_or_nothing_effect = {
				TARGET = scope:target
				OWNER = scope:owner
			}
		}
		else_if = {
			limit = {
				scope:target = {
					exists = liege
					NOT = { liege = scope:owner }
				}
			}
			show_as_tooltip = {
				mz_convert_outcome_publicised_attempted_crimes_or_nothing_effect = {
					TARGET = scope:target
					OWNER = scope:owner
				}
			}
			scope:target = { liege = { trigger_event = mz_convert_outcome.4900 } }
		}

		scope:target = { mz_convert_block_character_effect = { CHARACTER = scope:owner } }

		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.4004 = { #Refusal because of incest
	type = character_event
	title = mz_convert_outcome.4004.t
	desc = mz_convert_outcome.4004.desc
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:target = { 
			relation_with_character_is_incestuous_in_my_or_lieges_faith_trigger = { CHARACTER = root }
		}
		OR = {
			scope:target = { has_trait = lustful }
			scope:target = { has_focus = intrigue_temptation_focus }
			opinion = {
				target = root
				value >= medium_positive_opinion
			}
			attraction >= low_positive_attraction
		}
		NOT = { has_perk = subtle_desire_perk } #This sort of perk means attraction overrides reservations
		NOT = { exists = scope:scheme_discovered }
	}

	weight_multiplier = {
		base = 1
		modifier = {
			reverse_opinion = {
				target = scope:target
				value >= high_positive_opinion
			}
			add = 1
		}	
	}

	option = {
		name = mz_convert_outcome.4004.a

		scope:target = { mz_convert_cooldown_for_character_effect = { CHARACTER = scope:owner } }

		scope:scheme = { end_scheme = yes }	
	}
}

mz_convert_outcome.4005 = { #Failure due to discovery
	type = character_event
	title = mz_convert_outcome.4005.t
	desc = mz_convert_outcome.4005.desc
	
	theme = seduce_scheme
	override_background = {
		reference = courtyard
	}
	left_portrait = scope:target
	right_portrait = scope:target_liege
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		exists = scope:scheme_discovered
		scope:target = {
			is_landed = no
			exists = liege
			liege = {
				OR = {
					is_ai = yes
					is_female = no
				}
			}
		}
	}

	immediate = {
		if = { 
			limit = { scope:target = { is_independent_ruler = no } }
			scope:target = { liege = { save_scope_as = target_liege } }
		}
	}

	option = {
		name = mz_convert_outcome.4005.a

		show_as_tooltip = {
			mz_convert_outcome_publicised_attempted_crimes_or_nothing_effect = {
				TARGET = scope:target
				OWNER = scope:owner
			}
		} #Is actually applied in 4900

		scope:target = { seduction_cooldown_for_character_effect = { CHARACTER = scope:owner } }

		scope:scheme = { end_scheme = yes }	
		#Send "failed seduction attempt discovered" event to target's liege
		scope:target_liege = { trigger_event = mz_convert_outcome.4900 }
	}
}

mz_convert_outcome.4900 = { #Liege event, can happen to players
	type = character_event
	title = mz_convert_outcome.4900.t
	desc = mz_convert_outcome.4900.desc
	theme = seduce_scheme
	override_background = {
		reference = corridor_night
	}
	left_portrait = scope:owner
	right_portrait = scope:target

	immediate = { save_scope_as = target_liege }
	
	option = {
		name = {
			trigger = {
				OR = {
					is_spouse_of = scope:target
					is_close_or_extended_family_of = scope:target
				}
			}
			text = mz_convert_outcome.4900.a.family
		}
		name = {
			trigger = {
				NOR = {
					is_spouse_of = scope:target
					is_close_or_extended_family_of = scope:target
				}
			}
			text = mz_convert_outcome.4900.a.courtier
		}

			
		scope:owner = {
			mz_convert_outcome_publicised_attempted_crimes_or_nothing_effect = {
				TARGET = scope:target
				OWNER = scope:owner
			}
		}
	}
}

### Hard Reject Events
mz_convert_outcome.8102 = { #Hard block (incest)
	type = character_event
	title = mz_convert_outcome.8102.t
	desc = mz_convert_outcome.8102.desc
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	option = {
		name = mz_convert_outcome.8102.a
		custom_tooltip = mz_convert_blocked

		scope:target = { mz_convert_block_character_effect = { CHARACTER = scope:owner } }

		if = {
			limit = { exists = scope:scheme }
			scope:scheme = {
				end_scheme = yes
			}
		}
		
		reverse_add_opinion = {
			target = scope:target
			modifier = respect_opinion
			opinion = -25
		}
	}
}

mz_convert_outcome.8103 = { #Hard block (incest) + revealed
	type = character_event
	title = mz_convert_outcome.8103.t
	desc = mz_convert_outcome.8103.desc
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	option = {
		name = mz_convert_outcome.8103.a
		custom_tooltip = mz_convert_blocked

		mz_convert_outcome_publicised_attempted_crimes_or_nothing_effect = {
			TARGET = scope:target
			OWNER = scope:owner
		}

		scope:target = { mz_convert_block_character_effect = { CHARACTER = scope:owner } }

		if = {
			limit = { exists = scope:scheme }
			scope:scheme = {
				end_scheme = yes
			}
		}

		reverse_add_opinion = {
			target = scope:target
			modifier = respect_opinion
			opinion = -40
		}
	}
}

mz_convert_outcome.8101 = { #target event to handle hard block incest (placeholder)
	type = character_event
	title = mz_convert_outcome.placeholder.t
	desc = mz_convert_outcome.placeholder.desc

	theme = seduce_scheme
	left_portrait = scope:owner

	trigger = {
		exists = scope:scheme
	}

	immediate = {
		hidden_effect = {
			#For clearer and more controllable ai outcomes, we determine the outcome here:

			#HARD REJECT OR NOT?
			if = { # Guaranteed rejection
				limit = { guaranteed_under_20_incest_rejection_trigger = { TARGET = scope:target SEDUCER = scope:owner } }
				save_scope_value_as = {
					name = mz_convert_incest_outcome
					value = flag:reject
				}
			}
			else_if = { # Guaranteed acceptance (as long as guaranteed_under_20_incest_rejection_trigger is false)
				limit = { scope:owner = { has_perk = subtle_desire_perk } }
				save_scope_value_as = {
					name = mz_convert_incest_outcome
					value = flag:accept
				}
			}
			else_if = { # No outright rejection if target's faith is a lesbian faith and incest is allowed (scheme still has success penalty from family)
				limit = { 
					mz_lesbian_faith_devotee = yes
					faith = { has_doctrine_parameter = consanguinity_unrestricted_incest }
				}
				save_scope_value_as = {
					name = mz_convert_incest_outcome
					value = flag:accept
				}
			}
			else = { #Randomization
				random_list = {
					10 = {
						opinion_modifier = {
							opinion_target = scope:owner
							multiplier = 1
						}
						compare_modifier = {
							target = scope:owner
							value = attraction
						}
						modifier = {
							is_deviant_trigger = yes 
							add = 30
						}
						modifier = {
							has_trait = lustful
							add = 50
						}
						save_scope_value_as = {
							name = mz_convert_incest_outcome
							value = flag:accept
						}
					}
					10 = {
						modifier = {
							relation_with_character_is_incestuous_in_my_or_lieges_faith_trigger = { CHARACTER = scope:owner }
							add = 80
						}
						modifier = {
							is_close_family_of = scope:owner
							add = 90
						}
						modifier = {
							is_extended_family_of = scope:owner
							add = 30
						}
						modifier = { #lesbian devotees care less about this, since inbred children cannot be born. It is still taboo though
							mz_lesbian_faith_devotee = yes
							scope:owner = { mz_lesbian_faith_devotee = yes }
							factor = 0.5
						}
						save_scope_value_as = {
							name = mz_convert_incest_outcome
							value = flag:reject
						}
					}
				}
			}

			#SPECIFY REJECTION TYPE
			if = {
				limit = {
					exists = scope:mz_convert_incest_outcome
					scope:mz_convert_incest_outcome = flag:reject
				}

				#What kind of reject?
				random_list = {
					30 = { #Reveal
						opinion_modifier = {
							opinion_target = scope:owner
							multiplier = -0.25
						}
						ai_value_modifier = {
							ai_boldness = 0.5
							ai_compassion = -0.5
							ai_vengefulness = 0.5
						}
						ai_boldness_target_modifier = { VALUE = 100 }
						ai_vengefulness_target_modifier = { VALUE = 100 }
						modifier = { #fellow lesbian devotees don't do this as much
							mz_lesbian_faith_devotee = yes
							scope:owner = { mz_lesbian_faith_devotee = yes }
							factor = 0.2
						}
						min = 1 # To ensure 'mz_convert_incest_outcome' is never left unset.
						save_scope_value_as = {
							name = mz_convert_incest_outcome
							value = flag:reject_reveal
						}
					}
					70 = { #Silent reject
						opinion_modifier = {
							opinion_target = scope:owner
							multiplier = 0.25
						}
						modifier = { #Less harsh on child
							is_parent_of = scope:owner
							add = 30
						}
						modifier = { #Less harsh if you stand to inherit
							is_heir_of = scope:owner
							add = 30
						}
						ai_value_modifier = {
							ai_boldness = -0.5
							ai_compassion = 0.5
							ai_vengefulness = -0.5
						}
						ai_greed_target_modifier = { VALUE = 75 }
						min = 1 # To ensure 'mz_convert_incest_outcome' is never left unset.

						save_scope_value_as = {
							name = mz_convert_incest_outcome
							value = flag:reject_no_reveal
						}
					}
				}
			}
		}
	}

	option = { #Reject no reveal (scheme blocked)
		name = mz_convert_outcome.placeholder.option
		
		reverse_add_opinion = {
			target = scope:owner
			modifier = refusal_opinion
			opinion = -20
		}

		# mz_convert_block_character_effect = { CHARACTER = scope:owner } handled in owner event

		scope:owner = {
			trigger_event = mz_convert_outcome.8102
		}
		
		ai_chance = {
			base = 0
			modifier = {
				add = 100
				scope:mz_convert_incest_outcome = flag:reject_no_reveal
			}
		}
	}

	option = { #Reject + reveal (scheme blocked)
		name = mz_convert_outcome.placeholder.option

		reverse_add_opinion = {
			target = scope:owner
			modifier = angry_opinion
			opinion = -35
		}

		# mz_convert_block_character_effect = { CHARACTER = scope:owner } handled in owner event

		#Reveals incest (and sodomy/adultery)
		show_as_tooltip = {
			scope:owner = {
				mz_convert_outcome_publicised_attempted_crimes_or_nothing_effect = {
					TARGET = scope:target
					OWNER = scope:owner
				}
			}
		}

		scope:owner = {
			trigger_event = mz_convert_outcome.8103
		}

		ai_chance = {
			base = 0
			modifier = {
				add = 100
				scope:mz_convert_incest_outcome = flag:reject_reveal
			}
		}
	}

	option = { #Accept (scheme allowed)
		name = mz_convert_outcome.placeholder.option
		# custom_tooltip = mz_convert_outcome.8101.b.tt

		ai_chance = {
			base = 0
			modifier = {
				add = 100
				scope:mz_convert_incest_outcome = flag:accept
			}
		}
	}
}